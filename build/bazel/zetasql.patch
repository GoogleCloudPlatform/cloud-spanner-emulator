diff --git a/bazel/grpc_extra_deps.patch b/bazel/grpc_extra_deps.patch
index 771761b3..7f461c42 100644
--- a/bazel/grpc_extra_deps.patch
+++ b/bazel/grpc_extra_deps.patch
@@ -13,3 +13,41 @@ index 4d8afa3131..b42224501f 100644
      # Pull-in the go 3rd party dependencies for protoc_gen_validate, which is
      # needed for building C++ xDS protos
      go_third_party()
+
+ diff --git a/BUILD b/BUILD
+ index 3b5d7e5e3c..c5d61e6e4c 100644
+ --- a/BUILD
+ +++ b/BUILD
+ @@ -544,6 +544,7 @@ grpc_cc_library(
+      defines = ["GRPC_NO_XDS"],
+      external_deps = [
+          "absl/base:core_headers",
+ +        "absl/status",
+ +        "absl/strings",
+      ],
+      language = "c++",
+      public_hdrs = GRPC_PUBLIC_HDRS,
+
+ diff --git a/include/grpcpp/impl/status.h b/include/grpcpp/impl/status.h
+ index 95436ab8fb..fe9f44adf0 100644
+ --- a/include/grpcpp/impl/status.h
+ +++ b/include/grpcpp/impl/status.h
+ @@ -23,6 +23,7 @@
+
+  #include <grpc/support/port_platform.h>
+
+ +#include "absl/status/status.h"
+  #include <grpc/status.h>
+  #include <grpcpp/support/config.h>
+  #include <grpcpp/support/status_code_enum.h>
+ @@ -99,6 +100,10 @@ class GRPC_MUST_USE_RESULT_WHEN_USE_STRICT_WARNING Status {
+    Status(StatusCode code, const std::string& error_message)
+        : code_(code), error_message_(error_message) {}
+
+ +  operator absl::Status() const& {
+ +    return absl::Status(static_cast<absl::StatusCode>(code_), error_message_);
+ +  }
+ +
+    /// Construct an instance with \a code,  \a error_message and
+    /// \a error_details. It is an error to construct an OK status with non-empty
+    /// \a error_message and/or \a error_details.
diff --git a/bazel/icu.BUILD b/bazel/icu.BUILD
index be36d7de..f61d8f3c 100644
--- a/bazel/icu.BUILD
+++ b/bazel/icu.BUILD
@@ -35,20 +35,17 @@ filegroup(
 configure_make(
     name = "icu",
     configure_command = "source/configure",
-    args = select({
-        # AR is overridden to be libtool by rules_foreign_cc. It does not support ar style arguments
-        # like "r". We need to prevent the icu make rules from adding unsupported parameters by
-        # forcing ARFLAGS to keep the rules_foreign_cc value in this parameter
-        "@platforms//os:macos": [
-            "ARFLAGS=\"-static -o\"",
-            "MAKE=gnumake",
-        ],
-        "//conditions:default": [],
-    }),
-    env = {
-        "CXXFLAGS": "-fPIC",  # For JNI
-        "CFLAGS": "-fPIC",  # For JNI
-    },
+    env = select({
+            "@platforms//os:macos": {
+                "AR": "",
+                "CXXFLAGS": "-fPIC",  # For JNI
+                "CFLAGS": "-fPIC",  # For JNI
+            },
+            "//conditions:default": {
+                "CXXFLAGS": "-fPIC",  # For JNI
+                "CFLAGS": "-fPIC",  # For JNI
+            },
+        }),
     configure_options = [
         "--enable-option-checking",
         "--enable-static",
diff --git a/bazel/icu4c-64_2.patch b/bazel/icu4c-64_2.patch
index 69d12b63..a23bdcaf 100644
--- a/bazel/icu4c-64_2.patch
+++ b/bazel/icu4c-64_2.patch
@@ -5,7 +5,7 @@
  CXX = @CXX@
  AR = @AR@
 -ARFLAGS = @ARFLAGS@ r
-+ARFLAGS = @ARFLAGS@ -crs
++ARFLAGS = @ARFLAGS@
  RANLIB = @RANLIB@
  COMPILE_LINK_ENVVAR = @COMPILE_LINK_ENVVAR@
  UCLN_NO_AUTO_CLEANUP = @UCLN_NO_AUTO_CLEANUP@
diff --git a/bazel/zetasql_deps_step_1.bzl b/bazel/zetasql_deps_step_1.bzl
index f99531b9..fb669aa0 100644
--- a/bazel/zetasql_deps_step_1.bzl
+++ b/bazel/zetasql_deps_step_1.bzl
@@ -27,17 +27,6 @@ def zetasql_deps_step_1(add_bazel_version = True):
     if add_bazel_version:
         zetasql_bazel_version()
 
-    # Step 1 loads the toolchains_llvm helper repo.
-    # Step 2 uses the llvm_toolchain rule to load the toolchain repo for a specific arch.
-    # Step 3 loads the toolchain itself from that repo.
-    http_archive(
-        name = "toolchains_llvm",
-        canonical_id = "1.0.0",
-        sha256 = "e91c4361f99011a54814e1afbe5c436e0d329871146a3cd58c23a2b4afb50737",
-        strip_prefix = "toolchains_llvm-1.0.0",
-        url = "https://github.com/bazel-contrib/toolchains_llvm/releases/download/1.0.0/toolchains_llvm-1.0.0.tar.gz",
-    )
-
     http_archive(
         name = "io_bazel_rules_go",
         integrity = "sha256-M6zErg9wUC20uJPJ/B3Xqb+ZjCPn/yxFF3QdQEmpdvg=",
diff --git a/bazel/zetasql_deps_step_2.bzl b/bazel/zetasql_deps_step_2.bzl
index cf7f9b7e..04263e0e 100644
--- a/bazel/zetasql_deps_step_2.bzl
+++ b/bazel/zetasql_deps_step_2.bzl
@@ -26,22 +26,8 @@ load("@rules_m4//m4:m4.bzl", "m4_register_toolchains")
 load("@rules_proto//proto:repositories.bzl", "rules_proto_dependencies")
 load("@rules_proto//proto:setup.bzl", "rules_proto_setup")
 load("@rules_proto//proto:toolchains.bzl", "rules_proto_toolchains")
-load("@toolchains_llvm//toolchain:deps.bzl", "bazel_toolchain_dependencies")
-load("@toolchains_llvm//toolchain:rules.bzl", "llvm_toolchain")
 
 def _load_deps_from_step_1():
-    bazel_toolchain_dependencies()
-    llvm_toolchain(
-        name = "llvm_toolchain",
-        llvm_versions = {
-            "": "16.0.0",
-            # The LLVM repo stops providing pre-built binaries for the MacOS x86_64
-            # architecture for versions >= 16.0.0: https://github.com/llvm/llvm-project/releases,
-            # but our Kokoro MacOS tests are still using x86_64 (ventura).
-            # TODO: Upgrade the MacOS version to sonoma-slcn.
-            "darwin-x86_64": "15.0.7",
-        },
-    )
     rules_foreign_cc_dependencies()
 
 def textmapper_dependencies():
@@ -510,7 +496,6 @@ alias(
         flex_register_toolchains(version = "2.6.4")
         bison_register_toolchains(version = "3.3.2")
         go_rules_dependencies()
-        go_register_toolchains(version = "1.23.6")
         gazelle_dependencies()
         textmapper_dependencies()
 
diff --git a/bazel/zetasql_deps_step_3.bzl b/bazel/zetasql_deps_step_3.bzl
index cd0f5587..b9919424 100644
--- a/bazel/zetasql_deps_step_3.bzl
+++ b/bazel/zetasql_deps_step_3.bzl
@@ -20,7 +20,6 @@ load("@com_github_grpc_grpc//bazel:grpc_deps.bzl", "grpc_deps")
 load("@com_google_googleapis//:repository_rules.bzl", "switched_rules_by_language")
 load("@com_google_protobuf//:protobuf_deps.bzl", "protobuf_deps")
 load("@google_bazel_common//:workspace_defs.bzl", "google_common_workspace_rules")
-load("@llvm_toolchain//:toolchains.bzl", "llvm_register_toolchains")
 
 def zetasql_deps_step_3():
     protobuf_deps()
@@ -31,4 +30,3 @@ def zetasql_deps_step_3():
         cc = True,
     )
     google_common_workspace_rules()
-    llvm_register_toolchains()
diff --git a/zetasql/analyzer/BUILD b/zetasql/analyzer/BUILD
index e057a93d..b26784a8 100644
--- a/zetasql/analyzer/BUILD
+++ b/zetasql/analyzer/BUILD
@@ -21,7 +21,7 @@ load("@rules_cc//cc:cc_test.bzl", "cc_test")
 load(":builddefs.bzl", "gen_analyzer_test")
 
 package(
-    default_visibility = ["//zetasql/base:zetasql_implementation"],
+    default_visibility = ["//visibility:public"],
 )
 
 filegroup(
diff --git a/zetasql/analyzer/expr_resolver_helper.cc b/zetasql/analyzer/expr_resolver_helper.cc
index b0fd5438..5e4265cd 100644
--- a/zetasql/analyzer/expr_resolver_helper.cc
+++ b/zetasql/analyzer/expr_resolver_helper.cc
@@ -458,7 +458,8 @@ ExprResolutionInfo::ExprResolutionInfo(
     : ExprResolutionInfo(
           query_resolution_info_in, name_scope_in, aggregate_name_scope_in,
           analytic_name_scope_in,
-          {.allows_aggregation = allows_aggregation_in,
+          ExprResolutionInfoOptions{
+           .allows_aggregation = allows_aggregation_in,
            .allows_analytic = allows_analytic_in,
            .use_post_grouping_columns = use_post_grouping_columns_in,
            .clause_name = clause_name_in,
diff --git a/zetasql/analyzer/name_scope.cc b/zetasql/analyzer/name_scope.cc
index 0931909e..38fd61f8 100644
--- a/zetasql/analyzer/name_scope.cc
+++ b/zetasql/analyzer/name_scope.cc
@@ -1882,7 +1882,7 @@ NameList::AddRangeVariableInWrappingNameList(
   // variables, including for value tables, so we use `flatten_to_table`
   // which drops range variables.
   ZETASQL_RETURN_IF_ERROR(range_variable_name_list->MergeFrom(
-      *original_name_list, ast_location, {.flatten_to_table = true}));
+      *original_name_list, ast_location, MergeOptions{.flatten_to_table = true}));
 
   auto wrapper_name_list = std::make_shared<NameList>();
   ZETASQL_RETURN_IF_ERROR(
diff --git a/zetasql/analyzer/resolver_expr.cc b/zetasql/analyzer/resolver_expr.cc
index cd73c57b..6ebed2c4 100644
--- a/zetasql/analyzer/resolver_expr.cc
+++ b/zetasql/analyzer/resolver_expr.cc
@@ -3131,7 +3131,7 @@ class SystemVariableConstant final : public Constant {
                          const Type* type)
       : Constant(name_path), type_(type) {}
 
-  const Type* type() const override { return type_; }
+  const zetasql::Type* type() const override { return type_; }
   std::string DebugString() const override { return FullName(); }
   std::string ConstantValueDebugString() const override { return "<N/A>"; }
 
diff --git a/zetasql/base/BUILD b/zetasql/base/BUILD
index 264d00fb..0b522806 100644
--- a/zetasql/base/BUILD
+++ b/zetasql/base/BUILD
@@ -19,7 +19,7 @@ load("@rules_cc//cc:cc_test.bzl", "cc_test")
 
 licenses(["notice"])
 
-package(default_visibility = [":zetasql_implementation"])
+package(default_visibility = ["//visibility:public"])
 
 package_group(
     name = "zetasql_implementation",
diff --git a/zetasql/base/logging.h b/zetasql/base/logging.h
index 730ccdcb..46fe06b0 100644
--- a/zetasql/base/logging.h
+++ b/zetasql/base/logging.h
@@ -59,6 +59,17 @@ inline void ZetaSqlMakeCheckOpValueString(std::ostream *os, const T &v) {
   (*os) << v;
 }
 
+// This overloading is implemented to address the compilation issue when trying to log unique_ptr types
+// At the moment, we are not providing any specific implementation for handling unique_ptr types.
+template <typename T>
+inline void ZetaSqlMakeCheckOpValueString(std::ostream* os, const std::unique_ptr<T>& v) {
+  if (v == nullptr) {
+    (*os) << "nullptr";
+  } else {
+    (*os) << v.get();
+  }
+}
+
 // Overrides for char types provide readable values for unprintable
 // characters.
 template <>
diff --git a/zetasql/base/testing/BUILD b/zetasql/base/testing/BUILD
index 5ce04591..5a0a738f 100644
--- a/zetasql/base/testing/BUILD
+++ b/zetasql/base/testing/BUILD
@@ -19,7 +19,7 @@ load("@rules_cc//cc:cc_test.bzl", "cc_test")
 
 licenses(["notice"])
 
-package(default_visibility = ["//zetasql/base:zetasql_implementation"])
+package(default_visibility = ["//visibility:public"])
 
 # A drop in replacement for gtest_main that parsers absl flags
 cc_library(
@@ -58,6 +58,7 @@ cc_library(
         "@com_google_absl//absl/status:statusor",
         "@com_google_absl//absl/strings",
         "@com_google_googletest//:gtest",
+        "@com_github_grpc_grpc//:grpc++",
     ],
 )
 
@@ -72,6 +73,7 @@ cc_test(
         "@com_google_absl//absl/status",
         "@com_google_absl//absl/status:statusor",
         "@com_google_googletest//:gtest",
+        "@com_github_grpc_grpc//:grpc++",
     ],
 )
 
diff --git a/zetasql/common/BUILD b/zetasql/common/BUILD
index 262ad738..35cd35e4 100644
--- a/zetasql/common/BUILD
+++ b/zetasql/common/BUILD
@@ -13,10 +13,8 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
-load("@rules_cc//cc:cc_test.bzl", "cc_test")
-
 package(
-    default_visibility = ["//zetasql/base:zetasql_implementation"],
+    default_visibility = ["//visibility:public"],
     features = ["parse_headers"],
 )
 
diff --git a/zetasql/common/internal_value.h b/zetasql/common/internal_value.h
index 25d5c27a..01ab943c 100644
--- a/zetasql/common/internal_value.h
+++ b/zetasql/common/internal_value.h
@@ -116,7 +116,7 @@ class InternalValue {
   static std::string FormatInternal(const Value& x,
                                     bool include_array_ordereness
   ) {
-    return x.FormatInternal({
+    return x.FormatInternal(Type::FormatValueContentOptions{
         .force_type_at_top_level = true,
         .include_array_ordereness = include_array_ordereness,
         .indent = 0,
diff --git a/zetasql/parser/BUILD b/zetasql/parser/BUILD
index b1ca7a50..863b2471 100644
--- a/zetasql/parser/BUILD
+++ b/zetasql/parser/BUILD
@@ -28,7 +28,7 @@ load("//bazel:textmapper.bzl", "tm_syntax")
 load(":builddefs.bzl", "gen_parser_test")
 
 package(
-    default_visibility = ["//zetasql/base:zetasql_implementation"],
+    default_visibility = ["//visibility:public"],
 )
 
 genrule(
diff --git a/zetasql/public/coercer.cc b/zetasql/public/coercer.cc
index 930ac280..5761c002 100644
--- a/zetasql/public/coercer.cc
+++ b/zetasql/public/coercer.cc
@@ -154,7 +154,7 @@ class TypeSuperTypes {
     return false;
   }
 
-  const Type* type() const { return type_; }
+  const zetasql::Type* type() const { return type_; }
   TypeListView supertypes() const { return supertypes_; }
 
   std::vector<const Type*> ToVector() const {
diff --git a/zetasql/public/constant.h b/zetasql/public/constant.h
index 946183b0..177a5dfd 100644
--- a/zetasql/public/constant.h
+++ b/zetasql/public/constant.h
@@ -80,7 +80,7 @@ class Constant {
   const std::vector<std::string>& name_path() const { return name_path_; }
 
   // Returns the type of this Constant.
-  virtual const Type* type() const = 0;
+  virtual const zetasql::Type* type() const = 0;
 
   // Returns whether or not this Constant is a specific constant interface or
   // implementation.
diff --git a/zetasql/public/function_signature.h b/zetasql/public/function_signature.h
index 91796b86..a7fe0cc1 100644
--- a/zetasql/public/function_signature.h
+++ b/zetasql/public/function_signature.h
@@ -739,7 +739,7 @@ class FunctionArgumentType {
   // Returns NULL if kind_ is not ARG_TYPE_FIXED or ARG_TYPE_LAMBDA. If kind_ is
   // ARG_TYPE_LAMBDA, returns the type of lambda body type, which could be NULL
   // if the body type is templated.
-  const Type* type() const { return type_; }
+  const zetasql::Type* type() const { return type_; }
 
   SignatureArgumentKind kind() const { return kind_; }
 
diff --git a/zetasql/public/input_argument_type.h b/zetasql/public/input_argument_type.h
index 3f61a836..bd52976e 100644
--- a/zetasql/public/input_argument_type.h
+++ b/zetasql/public/input_argument_type.h
@@ -89,7 +89,7 @@ class InputArgumentType {
   ~InputArgumentType() {}
 
   // This may return nullptr (such as for lambda).
-  const Type* type() const { return type_; }
+  const zetasql::Type* type() const { return type_; }
 
   const std::vector<InputArgumentType>& field_types() const {
     return field_types_;
diff --git a/zetasql/public/property_graph.h b/zetasql/public/property_graph.h
index e9354b5d..6265517d 100644
--- a/zetasql/public/property_graph.h
+++ b/zetasql/public/property_graph.h
@@ -372,7 +372,7 @@ class GraphPropertyDeclaration {
     return ::zetasql::FullName(PropertyGraphNamePath(), Name());
   }
 
-  virtual const Type* Type() const = 0;
+  virtual const zetasql::Type* Type() const = 0;
 
   // Returns whether or not this GraphPropertyDeclaration is a specific
   // interface or implementation.
diff --git a/zetasql/public/simple_catalog.cc b/zetasql/public/simple_catalog.cc
index f909948a..5dd56444 100644
--- a/zetasql/public/simple_catalog.cc
+++ b/zetasql/public/simple_catalog.cc
@@ -1767,7 +1767,7 @@ SimpleTable::SimpleTable(absl::string_view name,
 // to something named 'value' is confusing there.
 SimpleTable::SimpleTable(absl::string_view name, const Type* row_type,
                          const int64_t id)
-    : SimpleTable(name, {{"value", row_type}}, id) {
+    : SimpleTable(name, {NameAndType({"value", row_type})}, id) {
   is_value_table_ = true;
 }
 
diff --git a/zetasql/public/simple_catalog.h b/zetasql/public/simple_catalog.h
index c93ae868..a1dc30b5 100644
--- a/zetasql/public/simple_catalog.h
+++ b/zetasql/public/simple_catalog.h
@@ -1257,7 +1257,7 @@ class SimpleConstant : public Constant {
       const SimpleConstantProto& simple_constant_proto,
       const TypeDeserializer& type_deserializer);
 
-  const Type* type() const override { return value_.type(); }
+  const zetasql::Type* type() const override { return value_.type(); }
 
   const Value& value() const { return value_; }
 
diff --git a/zetasql/public/sql_constant.h b/zetasql/public/sql_constant.h
index fa88344f..69defd3b 100644
--- a/zetasql/public/sql_constant.h
+++ b/zetasql/public/sql_constant.h
@@ -60,7 +60,7 @@ class SQLConstant : public Constant {
 
   // Returns the Type of the resolved Constant based on its resolved
   // expression type.
-  const Type* type() const override {
+  const zetasql::Type* type() const override {
     return constant_expression()->type();
   }
 
diff --git a/zetasql/public/types/BUILD b/zetasql/public/types/BUILD
index 512ab4f6..4be021d8 100644
--- a/zetasql/public/types/BUILD
+++ b/zetasql/public/types/BUILD
@@ -17,7 +17,7 @@
 load("@rules_cc//cc:cc_library.bzl", "cc_library")
 load("@rules_cc//cc:cc_test.bzl", "cc_test")
 
-package(default_visibility = ["//zetasql/base:zetasql_implementation"])
+package(default_visibility = ["//visibility:public"])
 
 filegroup(
     name = "type_headers",
diff --git a/zetasql/public/value.cc b/zetasql/public/value.cc
index d5b35c63..dc236d12 100644
--- a/zetasql/public/value.cc
+++ b/zetasql/public/value.cc
@@ -1243,7 +1243,7 @@ std::string Value::DebugString(bool verbose) const {
 
 // Format will wrap arrays and structs.
 std::string Value::Format(bool print_top_level_type) const {
-  return FormatInternal(
+  return FormatInternal(Type::FormatValueContentOptions
       {.force_type_at_top_level = print_top_level_type, .indent = 0});
 }
 
@@ -1511,7 +1511,7 @@ std::string Value::FormatInternal(
     std::vector<std::string> element_strings(elements().size());
     for (int i = 0; i < elements().size(); ++i) {
       element_strings[i] =
-          elements()[i].FormatInternal(options.IncreaseIndent());
+          elements()[i].FormatInternal(Type::FormatValueContentOptions{options.IncreaseIndent()});
     }
     // Sanitize any '$' characters before creating substitution template. "$$"
     // is replaced by "$" in the output from absl::Substitute.
@@ -1553,7 +1553,7 @@ std::string Value::FormatInternal(
     const StructType* struct_type = type()->AsStruct();
     std::vector<std::string> field_strings(struct_type->num_fields());
     for (int i = 0; i < struct_type->num_fields(); i++) {
-      field_strings[i] = fields()[i].FormatInternal(options.IncreaseIndent());
+      field_strings[i] = fields()[i].FormatInternal(Type::FormatValueContentOptions{options.IncreaseIndent()});
     }
     // Sanitize any '$' characters before creating substitution template. "$$"
     // is replaced by "$" in the output from absl::Substitute.
@@ -1599,9 +1599,9 @@ std::string Value::FormatInternal(
     }
     std::vector<std::string> boundaries_strings;
     boundaries_strings.push_back(
-        start().FormatInternal(options.IncreaseIndent()));
+        start().FormatInternal(Type::FormatValueContentOptions{options.IncreaseIndent()}));
     boundaries_strings.push_back(
-        end().FormatInternal(options.IncreaseIndent()));
+        end().FormatInternal(Type::FormatValueContentOptions{options.IncreaseIndent()}));
     // Sanitize any '$' characters before creating substitution template. "$$"
     // is replaced by "$" in the output from absl::Substitute.
     std::string templ =
diff --git a/zetasql/public/value.h b/zetasql/public/value.h
index 7a8fdd54..956af288 100644
--- a/zetasql/public/value.h
+++ b/zetasql/public/value.h
@@ -118,7 +118,7 @@ class Value {
   ~Value();
 
   // Returns the type of the value.
-  const Type* type() const;
+  const zetasql::Type* type() const;
 
   // Returns the type kind of the value. Same as type()->type_kind() but in some
   // cases can be a bit more efficient.
@@ -1221,7 +1221,7 @@ class Value {
 
     // Returns a pointer to Value's Type. Requires is_valid(). If TypeKind is
     // stored in the Metadata, Type pointer is obtained from static TypeFactory.
-    const Type* type() const;
+    const zetasql::Type* type() const;
 
     // Returns true, if instance stores pointer to a Type and false if type's
     // kind.
diff --git a/zetasql/public/value_inl.h b/zetasql/public/value_inl.h
index b9831037..8d892b1d 100644
--- a/zetasql/public/value_inl.h
+++ b/zetasql/public/value_inl.h
@@ -1159,7 +1159,7 @@ class Value::Metadata::Content {
   // TODO: wait for fixed clang-format
   // clang-format on
 
-  const Type* type() const {
+  const zetasql::Type* type() const {
     return reinterpret_cast<const Type*>(type_ & kTypeMask);
   }
   int32_t value_extended_content() const { return value_extended_content_; }
diff --git a/zetasql/reference_impl/operator.h b/zetasql/reference_impl/operator.h
index a432666c..6b17e767 100644
--- a/zetasql/reference_impl/operator.h
+++ b/zetasql/reference_impl/operator.h
@@ -242,7 +242,7 @@ class ExprArg : public AlgebraArg {
 
   ~ExprArg() override = default;
 
-  const Type* type() const { return type_; }
+  const zetasql::Type* type() const { return type_; }
 
  private:
   const Type* type_;
diff --git a/zetasql/resolved_ast/resolved_column.h b/zetasql/resolved_ast/resolved_column.h
index d5e484b8..dc9c7eca 100644
--- a/zetasql/resolved_ast/resolved_column.h
+++ b/zetasql/resolved_ast/resolved_column.h
@@ -121,7 +121,7 @@ class ResolvedColumn {
   IdString table_name_id() const { return table_name_; }
   IdString name_id() const { return name_; }
 
-  const Type* type() const { return annotated_type_.type; }
+  const zetasql::Type* type() const { return annotated_type_.type; }
 
   const AnnotationMap* /*absl_nullable*/ type_annotation_map() const {
     return annotated_type_.annotation_map;
diff --git a/zetasql/testing/test_value.h b/zetasql/testing/test_value.h
index 6d59d274..cc8d1398 100644
--- a/zetasql/testing/test_value.h
+++ b/zetasql/testing/test_value.h
@@ -110,7 +110,7 @@ class ValueConstructor {
       : v_(v) {}
 
   const Value& get() const { return v_; }
-  const Type* type() const { return v_.type(); }
+  const zetasql::Type* type() const { return v_.type(); }
 
   static std::vector<Value> ToValues(absl::Span<const ValueConstructor> slice) {
     std::vector<Value> values;
