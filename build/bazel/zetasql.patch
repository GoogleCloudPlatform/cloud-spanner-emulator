diff --git a/zetasql/analyzer/BUILD b/zetasql/analyzer/BUILD
index 590f1be1..3ca15df4 100644
--- a/zetasql/analyzer/BUILD
+++ b/zetasql/analyzer/BUILD
@@ -18,7 +18,7 @@ load("@bazel_skylib//:bzl_library.bzl", "bzl_library")
 load(":builddefs.bzl", "gen_analyzer_test")
 
 package(
-    default_visibility = ["//zetasql/base:zetasql_implementation"],
+    default_visibility = ["//visibility:public"],
 )
 
 filegroup(
diff --git a/zetasql/analyzer/expr_resolver_helper.cc b/zetasql/analyzer/expr_resolver_helper.cc
index 93c3654d..8fb2256e 100644
--- a/zetasql/analyzer/expr_resolver_helper.cc
+++ b/zetasql/analyzer/expr_resolver_helper.cc
@@ -357,7 +357,8 @@ ExprResolutionInfo::ExprResolutionInfo(
     : ExprResolutionInfo(
           query_resolution_info_in, name_scope_in, aggregate_name_scope_in,
           analytic_name_scope_in,
-          {.allows_aggregation = allows_aggregation_in,
+          ExprResolutionInfoOptions{
+           .allows_aggregation = allows_aggregation_in,
            .allows_analytic = allows_analytic_in,
            .use_post_grouping_columns = use_post_grouping_columns_in,
            .clause_name = clause_name_in,
diff --git a/zetasql/analyzer/name_scope.cc b/zetasql/analyzer/name_scope.cc
index b9a3176f..c1cf274a 100644
--- a/zetasql/analyzer/name_scope.cc
+++ b/zetasql/analyzer/name_scope.cc
@@ -1549,7 +1549,7 @@ NameList::AddRangeVariableInWrappingNameList(
   // variables, including for value tables, so we use `flatten_to_table`
   // which drops range variables.
   ZETASQL_RETURN_IF_ERROR(range_variable_name_list->MergeFrom(
-      *original_name_list, ast_location, {.flatten_to_table = true}));
+      *original_name_list, ast_location, MergeOptions{.flatten_to_table = true}));
 
   auto wrapper_name_list = std::make_shared<NameList>();
   ZETASQL_RETURN_IF_ERROR(
diff --git a/zetasql/analyzer/resolver_expr.cc b/zetasql/analyzer/resolver_expr.cc
index 6116b4f7..fa594774 100644
--- a/zetasql/analyzer/resolver_expr.cc
+++ b/zetasql/analyzer/resolver_expr.cc
@@ -4957,7 +4957,7 @@ absl::Status Resolver::ResolveAggregateFunctionGroupingModifiers(
   ExprResolutionInfo multi_level_agg_expr_resolution_info(
       expr_resolution_info->query_resolution_info,
       expr_resolution_info->aggregate_name_scope,
-      {
+      ExprResolutionInfoOptions{
           .allows_aggregation = false,
           .allows_analytic = false,
           .clause_name = "GROUP BY inside aggregate",
diff --git a/zetasql/analyzer/resolver_expr.cc b/zetasql/analyzer/resolver_expr.cc
index 6116b4f7..70e8c9fd 100644
--- a/zetasql/analyzer/resolver_expr.cc
+++ b/zetasql/analyzer/resolver_expr.cc
@@ -5586,7 +5586,8 @@ absl::Status Resolver::ResolveAnalyticFunctionCall(
   {
     ExprResolutionInfo analytic_arg_resolution_info(
         expr_resolution_info,
-        {.name_scope = expr_resolution_info->analytic_name_scope,
+        ExprResolutionInfoOptions{
+         .name_scope = expr_resolution_info->analytic_name_scope,
          .allows_analytic = expr_resolution_info->allows_analytic,
          .clause_name = expr_resolution_info->clause_name});
     ZETASQL_RETURN_IF_ERROR(ResolveExpressionArguments(
diff --git a/zetasql/analyzer/resolver_query.cc b/zetasql/analyzer/resolver_query.cc
index d9362bbf..d72cca3b 100644
--- a/zetasql/analyzer/resolver_query.cc
+++ b/zetasql/analyzer/resolver_query.cc
@@ -624,8 +624,9 @@ static absl::Status UpdateNameListForTableAlias(
       // If the value table has an existing range variable, then it has to be
       // renamed to the new name.
       ZETASQL_RETURN_IF_ERROR(
-          new_name_list->MergeFrom(*input_name_list, ast_location,
-                                   {.rename_value_table_to_name = &alias}));
+          new_name_list->MergeFrom(
+            *input_name_list, ast_location,
+            NameList::MergeOptions{.rename_value_table_to_name = &alias}));
     } else {
       // If the value table was anonymous and didn't have an existing range
       // variable, this function will create one, using `alias` as the name.
@@ -641,8 +642,9 @@ static absl::Status UpdateNameListForTableAlias(
   // to drop existing range variables and convert value tables to columns,
   // and then make the new range variables pointing at the remaining columns.
   auto new_name_list = std::make_shared<NameList>();
-  ZETASQL_RETURN_IF_ERROR(new_name_list->MergeFrom(*input_name_list, ast_location,
-                                           {.flatten_to_table = true}));
+  ZETASQL_RETURN_IF_ERROR(new_name_list->MergeFrom(
+      *input_name_list, ast_location,
+      NameList::MergeOptions{.flatten_to_table = true}));
 
   ZETASQL_ASSIGN_OR_RETURN(*output_name_list,
                    NameList::AddRangeVariableInWrappingNameList(
diff --git a/zetasql/analyzer/resolver_stmt.cc b/zetasql/analyzer/resolver_stmt.cc
index 86e3cf09..64379885 100644
--- a/zetasql/analyzer/resolver_stmt.cc
+++ b/zetasql/analyzer/resolver_stmt.cc
@@ -2325,7 +2325,8 @@ absl::Status Resolver::ResolveCreateTablePartitionByList(
                                                             : "CLUSTER BY";
 
   ExprResolutionInfo resolution_info(query_info, &name_scope,
-                                     {.allows_aggregation = false,
+                                     ExprResolutionInfoOptions{
+                                      .allows_aggregation = false,
                                       .allows_analytic = false,
                                       .clause_name = clause_name});
 
@@ -4345,7 +4346,8 @@ absl::Status Resolver::ResolveCreateFunctionStatement(
         // inside the function body.
         QueryResolutionInfo query_info(this);
         ExprResolutionInfo expr_info(&query_info, empty_name_scope_.get(),
-                                     {.allows_aggregation = true,
+                                     ExprResolutionInfoOptions{
+                                      .allows_aggregation = true,
                                       .allows_analytic = false,
                                       .clause_name = "SQL function body"});
 
@@ -7131,7 +7133,8 @@ absl::Status Resolver::ResolveExecuteImmediateStatement(
       absl::flat_hash_set<IdString, IdStringCaseHash, IdStringCaseEqualFunc>;
   QueryResolutionInfo query_info(this);
   ExprResolutionInfo expr_info(&query_info, empty_name_scope_.get(),
-                               {.allows_aggregation = false,
+                               ExprResolutionInfoOptions{
+                                .allows_aggregation = false,
                                 .allows_analytic = false,
                                 .clause_name = "SQL EXECUTE IMMEDIATE"});
   std::unique_ptr<const ResolvedExpr> sql;
diff --git a/zetasql/analyzer/rewriters/anonymization_helper.cc b/zetasql/analyzer/rewriters/anonymization_helper.cc
index 5f0e4534..ea68c177 100644
--- a/zetasql/analyzer/rewriters/anonymization_helper.cc
+++ b/zetasql/analyzer/rewriters/anonymization_helper.cc
@@ -724,7 +724,7 @@ absl::StatusOr<std::unique_ptr<ResolvedExpr>> ResolveFunctionCall(
   QueryResolutionInfo query_resolution_info(resolver);
   ExprResolutionInfo expr_resolution_info(&query_resolution_info,
                                           &empty_name_scope,
-                                          {
+                                          ExprResolutionInfoOptions{
                                               .allows_aggregation = true,
                                               .allows_analytic = false,
                                           });
diff --git a/zetasql/base/BUILD b/zetasql/base/BUILD
index aa1f00da..7d4c3b3a 100644
--- a/zetasql/base/BUILD
+++ b/zetasql/base/BUILD
@@ -15,7 +15,7 @@
 
 licenses(["notice"])
 
-package(default_visibility = [":zetasql_implementation"])
+package(default_visibility = ["//visibility:public"])
 
 package_group(
     name = "zetasql_implementation",
diff --git a/zetasql/base/testing/BUILD b/zetasql/base/testing/BUILD
index 10596497..239c670f 100644
--- a/zetasql/base/testing/BUILD
+++ b/zetasql/base/testing/BUILD
@@ -16,7 +16,7 @@
 
 licenses(["notice"])
 
-package(default_visibility = ["//zetasql/base:zetasql_implementation"])
+package(default_visibility = ["//visibility:public"])
 
 # A drop in replacement for gtest_main that parsers absl flags
 cc_library(
diff --git a/zetasql/common/BUILD b/zetasql/common/BUILD
index cdafb15e..761e13cd 100644
--- a/zetasql/common/BUILD
+++ b/zetasql/common/BUILD
@@ -14,7 +14,7 @@
 # limitations under the License.
 
 package(
-    default_visibility = ["//zetasql/base:zetasql_implementation"],
+    default_visibility = ["//visibility:public"],
     features = ["parse_headers"],
 )
 
diff --git a/zetasql/common/internal_value.h b/zetasql/common/internal_value.h
index 770333d2..617ef628 100644
--- a/zetasql/common/internal_value.h
+++ b/zetasql/common/internal_value.h
@@ -116,7 +116,7 @@ class InternalValue {
   static std::string FormatInternal(const Value& x,
                                     bool include_array_ordereness
   ) {
-    return x.FormatInternal({
+    return x.FormatInternal(Type::FormatValueContentOptions{
         .force_type_at_top_level = true,
         .include_array_ordereness = include_array_ordereness,
         .indent = 0,
diff --git a/zetasql/parser/BUILD b/zetasql/parser/BUILD
index 433cf157..4fa4417c 100644
--- a/zetasql/parser/BUILD
+++ b/zetasql/parser/BUILD
@@ -26,7 +26,7 @@ load("//bazel:textmapper.bzl", "tm_syntax")
 load(":builddefs.bzl", "gen_parser_test")
 
 package(
-    default_visibility = ["//zetasql/base:zetasql_implementation"],
+    default_visibility = ["//visibility:public"],
 )
 
 genrule(
diff --git a/zetasql/public/types/BUILD b/zetasql/public/types/BUILD
index 2b42fdcb..19ff2a4e 100644
--- a/zetasql/public/types/BUILD
+++ b/zetasql/public/types/BUILD
@@ -14,7 +14,7 @@
 # limitations under the License.
 #
 
-package(default_visibility = ["//zetasql/base:zetasql_implementation"])
+package(default_visibility = ["//visibility:public"])
 
 cc_library(
     name = "types",
diff --git a/zetasql/public/types/type.h b/zetasql/public/types/type.h
index 40ceaa24..c405d6a1 100644
--- a/zetasql/public/types/type.h
+++ b/zetasql/public/types/type.h
@@ -622,45 +622,6 @@ class Type {
     std::optional<int64_t> file_descriptor_sets_max_size_bytes = std::nullopt;
   };
 
- protected:
-  // Types can only be created and destroyed by TypeFactory.
-  Type(const TypeFactory* factory, TypeKind kind);
-  virtual ~Type() = default;
-
-  bool EqualsImpl(const Type* other_type, bool equivalent) const {
-    if (this == other_type) {
-      return true;
-    }
-    if (kind() != other_type->kind()) {
-      return false;
-    }
-    return EqualsForSameKind(other_type, equivalent);
-  }
-
-  // Hashes the type. Hash is generated based on a type's kind and (if type is
-  // not built-in simple type) on a type's parameter.
-  absl::HashState Hash(absl::HashState state) const;
-
-  // Hashes the type's parameter of non-simple (parameterized) types. Simple
-  // built-in types should not update the hash state.
-  virtual absl::HashState HashTypeParameter(absl::HashState state) const = 0;
-
-  // Internal implementation for Serialize methods.  This will append
-  // Type information to <type_proto>, so the caller should make sure
-  // that <type_proto> has been initialized properly before invoking.
-  // <options> controls whether FileDescriptors are deep-scanned and
-  // FileDescriptorSets are generated, and also whether there are any limits
-  // placed on the size of the FileDescriptorSets.
-  virtual absl::Status SerializeToProtoAndDistinctFileDescriptorsImpl(
-      const BuildFileDescriptorSetMapOptions& options, TypeProto* type_proto,
-      FileDescriptorSetMap* file_descriptor_set_map) const = 0;
-
-  // Returns estimated size of memory owned by this type. Note: type can never
-  // own another type, only reference (all types are owned by TypeFactory). So,
-  // this function never calls GetEstimatedOwnedMemoryBytesSize for other types
-  // (such as element types of arrays or field types of structs).
-  virtual int64_t GetEstimatedOwnedMemoryBytesSize() const = 0;
-
   // Formatting options that can be provided to FormatValueContent.
   struct FormatValueContentOptions {
     enum class Mode {
@@ -712,6 +673,45 @@ class Type {
     static const int kIndentStep = 2;
   };
 
+ protected:
+  // Types can only be created and destroyed by TypeFactory.
+  Type(const TypeFactory* factory, TypeKind kind);
+  virtual ~Type() = default;
+
+  bool EqualsImpl(const Type* other_type, bool equivalent) const {
+    if (this == other_type) {
+      return true;
+    }
+    if (kind() != other_type->kind()) {
+      return false;
+    }
+    return EqualsForSameKind(other_type, equivalent);
+  }
+
+  // Hashes the type. Hash is generated based on a type's kind and (if type is
+  // not built-in simple type) on a type's parameter.
+  absl::HashState Hash(absl::HashState state) const;
+
+  // Hashes the type's parameter of non-simple (parameterized) types. Simple
+  // built-in types should not update the hash state.
+  virtual absl::HashState HashTypeParameter(absl::HashState state) const = 0;
+
+  // Internal implementation for Serialize methods.  This will append
+  // Type information to <type_proto>, so the caller should make sure
+  // that <type_proto> has been initialized properly before invoking.
+  // <options> controls whether FileDescriptors are deep-scanned and
+  // FileDescriptorSets are generated, and also whether there are any limits
+  // placed on the size of the FileDescriptorSets.
+  virtual absl::Status SerializeToProtoAndDistinctFileDescriptorsImpl(
+      const BuildFileDescriptorSetMapOptions& options, TypeProto* type_proto,
+      FileDescriptorSetMap* file_descriptor_set_map) const = 0;
+
+  // Returns estimated size of memory owned by this type. Note: type can never
+  // own another type, only reference (all types are owned by TypeFactory). So,
+  // this function never calls GetEstimatedOwnedMemoryBytesSize for other types
+  // (such as element types of arrays or field types of structs).
+  virtual int64_t GetEstimatedOwnedMemoryBytesSize() const = 0;
+
   // List of DebugStringImpl outputs. Used to serve as a stack in
   // DebugStringImpl to protect from stack overflows.
   // Note: SWIG will fail to process this file if we remove a white space
diff --git a/zetasql/public/value.cc b/zetasql/public/value.cc
index 7aeffb01..c9f9f9dc 100644
--- a/zetasql/public/value.cc
+++ b/zetasql/public/value.cc
@@ -1067,7 +1067,7 @@ std::string Value::DebugString(bool verbose) const {
 
 // Format will wrap arrays and structs.
 std::string Value::Format(bool print_top_level_type) const {
-  return FormatInternal(
+  return FormatInternal(Type::FormatValueContentOptions
       {.force_type_at_top_level = print_top_level_type, .indent = 0});
 }
 
@@ -1335,7 +1335,7 @@ std::string Value::FormatInternal(
     std::vector<std::string> element_strings(elements().size());
     for (int i = 0; i < elements().size(); ++i) {
       element_strings[i] =
-          elements()[i].FormatInternal(options.IncreaseIndent());
+          elements()[i].FormatInternal(Type::FormatValueContentOptions{options.IncreaseIndent()});
     }
     // Sanitize any '$' characters before creating substitution template. "$$"
     // is replaced by "$" in the output from absl::Substitute.
@@ -1377,7 +1377,7 @@ std::string Value::FormatInternal(
     const StructType* struct_type = type()->AsStruct();
     std::vector<std::string> field_strings(struct_type->num_fields());
     for (int i = 0; i < struct_type->num_fields(); i++) {
-      field_strings[i] = fields()[i].FormatInternal(options.IncreaseIndent());
+      field_strings[i] = fields()[i].FormatInternal(Type::FormatValueContentOptions{options.IncreaseIndent()});
     }
     // Sanitize any '$' characters before creating substitution template. "$$"
     // is replaced by "$" in the output from absl::Substitute.
@@ -1423,9 +1423,9 @@ std::string Value::FormatInternal(
     }
     std::vector<std::string> boundaries_strings;
     boundaries_strings.push_back(
-        start().FormatInternal(options.IncreaseIndent()));
+        start().FormatInternal(Type::FormatValueContentOptions{options.IncreaseIndent()}));
     boundaries_strings.push_back(
-        end().FormatInternal(options.IncreaseIndent()));
+        end().FormatInternal(Type::FormatValueContentOptions{options.IncreaseIndent()}));
     // Sanitize any '$' characters before creating substitution template. "$$"
     // is replaced by "$" in the output from absl::Substitute.
     std::string templ =
diff --git a/zetasql/reference_impl/algebrizer.cc b/zetasql/reference_impl/algebrizer.cc
index 2e1258ab..48a3d7f4 100644
--- a/zetasql/reference_impl/algebrizer.cc
+++ b/zetasql/reference_impl/algebrizer.cc
@@ -6738,7 +6738,7 @@ absl::StatusOr<std::unique_ptr<RelationalOp>> Algebrizer::AlgebrizeTvfScan(
       ZETASQL_RET_CHECK(tvf_scan->signature()->argument(i).is_scalar());
       ZETASQL_ASSIGN_OR_RETURN(auto expr_argument,
                        AlgebrizeExpression(argument->expr()));
-      arguments.push_back({.value = std::move(expr_argument)});
+      arguments.push_back(TVFOp::TVFOpArgument{.value = std::move(expr_argument)});
       continue;
     }
 
@@ -6767,14 +6767,14 @@ absl::StatusOr<std::unique_ptr<RelationalOp>> Algebrizer::AlgebrizeTvfScan(
         columns.push_back({relation_signature_column.name,
                            argument_column.type(), input_variable});
       }
-      arguments.push_back({.relation = TVFOp::TvfInputRelation{
+      arguments.push_back(TVFOp::TVFOpArgument{.relation = TVFOp::TvfInputRelation{
                                std::move(relation), std::move(columns)}});
       continue;
     }
 
     if (argument->model() != nullptr) {
       ZETASQL_RET_CHECK(tvf_scan->signature()->argument(i).is_model());
-      arguments.push_back({.model = argument->model()->model()});
+      arguments.push_back(TVFOp::TVFOpArgument{.model = argument->model()->model()});
       continue;
     }
 
diff --git a/zetasql/reference_impl/relational_op.cc b/zetasql/reference_impl/relational_op.cc
index 1619590a..a18a733f 100644
--- a/zetasql/reference_impl/relational_op.cc
+++ b/zetasql/reference_impl/relational_op.cc
@@ -835,11 +835,11 @@ absl::StatusOr<std::unique_ptr<TupleIterator>> TVFOp::CreateIterator(
       }
       ZETASQL_RET_CHECK_EQ(columns.size(), tuple_indexes.size());
       input_arguments.push_back(
-          {.relation = {std::make_unique<InputRelationIterator>(
+          TableValuedFunction::TvfEvaluatorArg{.relation = {std::make_unique<InputRelationIterator>(
                std::move(columns), std::move(tuple_indexes), context,
                std::move(tuple_iterator))}});
     } else if (argument.model) {
-      input_arguments.push_back({.model = argument.model});
+      input_arguments.push_back(TableValuedFunction::TvfEvaluatorArg{.model = argument.model});
     } else {
       ZETASQL_RET_CHECK_FAIL() << "Unexpected TVFOpArgument";
     }
