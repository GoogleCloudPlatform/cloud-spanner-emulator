//
// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

#include "backend/query/search/search_ngrams_evaluator.h"

#include <cstdint>
#include <optional>
#include <string>
#include <vector>

#include "zetasql/public/value.h"
#include "gmock/gmock.h"
#include "gtest/gtest.h"
#include "zetasql/base/testing/status_matchers.h"
#include "absl/status/status.h"
#include "absl/status/statusor.h"
#include "backend/query/search/plain_full_text_tokenizer.h"
#include "backend/query/search/tokenizer.h"

namespace google {
namespace spanner {
namespace emulator {
namespace backend {
namespace query {
namespace search {

using testing::HasSubstr;
using zetasql_base::testing::StatusIs;

TEST(SearchNgramsEvaluatorTest, EvaluateWrongSearchColumnType) {
  std::vector<zetasql::Value> args;
  args.push_back(zetasql::Value::Bool(false));
  args.push_back(zetasql::Value::String("test"));
  args.push_back(zetasql::Value::Int64(0));
  args.push_back(zetasql::Value::Double(0));

  EXPECT_THAT(
      SearchNgramsEvaluator::Evaluate(args),
      StatusIs(
          absl::StatusCode::kInvalidArgument,
          HasSubstr("Invalid search query. Trying to execute search related "
                    "function on unsupported column type: BOOL.")));
}

TEST(SearchNgramsEvaluatorTest, EvaluateWrongSearchQueryType) {
  std::vector<zetasql::Value> args;
  args.push_back(TokenListFromStrings({}));
  args.push_back(zetasql::Value::Bool(false));
  args.push_back(zetasql::Value::Int64(0));
  args.push_back(zetasql::Value::Double(0));

  EXPECT_THAT(SearchNgramsEvaluator::Evaluate(args),
              StatusIs(absl::StatusCode::kInvalidArgument,
                       HasSubstr("Invalid search query type: BOOL.")));
}

TEST(SearchNgramsEvaluatorTest, EvaluateOnWrongTokenList) {
  std::vector<zetasql::Value> args;
  const auto fulltext_tokenlist =
      PlainFullTextTokenizer::Tokenize({zetasql::Value::String("fulltext")});
  args.push_back(*fulltext_tokenlist);
  args.push_back(zetasql::Value::String("test"));
  args.push_back(zetasql::Value::Int64(0));
  args.push_back(zetasql::Value::Double(0));

  EXPECT_THAT(
      SearchNgramsEvaluator::Evaluate(args),
      StatusIs(absl::StatusCode::kInvalidArgument,
               HasSubstr("SEARCH_NGRAMS function's first argument must be a "
                         "TOKENLIST column generated by "
                         "TOKENIZE_SUBSTRING or TOKENIZE_NGRAMS")));
}

TEST(SearchNgramsEvaluatorTest, EvaluateOnNullTokenList) {
  std::vector<zetasql::Value> args;
  args.push_back(zetasql::Value::NullTokenList());
  args.push_back(zetasql::Value::String("test"));
  args.push_back(zetasql::Value::Int64(0));
  args.push_back(zetasql::Value::Double(0));

  const auto result = SearchNgramsEvaluator::Evaluate(args);
  EXPECT_TRUE(result->is_null());
}

TEST(SearchNgramsEvaluatorTest, EvaluateOnEmptyTokenList) {
  std::vector<zetasql::Value> args;
  args.push_back(TokenListFromStrings({""}));
  args.push_back(zetasql::Value::String("test"));
  args.push_back(zetasql::Value::Int64(0));
  args.push_back(zetasql::Value::Double(0));

  EXPECT_THAT(
      SearchNgramsEvaluator::Evaluate(args),
      StatusIs(absl::StatusCode::kInvalidArgument,
               HasSubstr("SEARCH_NGRAMS function's first argument must be a "
                         "TOKENLIST column generated by "
                         "TOKENIZE_SUBSTRING or TOKENIZE_NGRAMS")));
}

struct TokenizerSignatureTestCase {
  std::string tokenizer_sig;
};

using TokenizerSignatureTest =
    ::testing::TestWithParam<TokenizerSignatureTestCase>;

TEST_P(TokenizerSignatureTest, TestTokenizerSignature) {
  const TokenizerSignatureTestCase& test_case = GetParam();
  std::vector<zetasql::Value> args;
  args.push_back(TokenListFromStrings({test_case.tokenizer_sig}));
  args.push_back(zetasql::Value::String("test"));
  args.push_back(zetasql::Value::Int64(0));
  args.push_back(zetasql::Value::Double(0));

  EXPECT_THAT(SearchNgramsEvaluator::Evaluate(args),
              StatusIs(absl::StatusCode::kInternal));
};

INSTANTIATE_TEST_SUITE_P(
    TokenizerSignatureTestSuite, TokenizerSignatureTest,
    testing::ValuesIn<TokenizerSignatureTestCase>({{"ngrams-4"},
                                                   {"ngrams-true-4"},
                                                   {"ngrams-4-0.1"},
                                                   {"ngrams-4-0.1-0"},
                                                   {"substring-4"},
                                                   {"substring-true-4"},
                                                   {"substring-4-0.1"},
                                                   {"substring-4-0.1-0"}}));

struct SearchNgramsEvaluatorTestCase {
  std::vector<std::string> tokens;
  std::string query;
  std::optional<int64_t> min_ngrams;
  std::optional<int64_t> min_ngrams_percent;
  bool expected_result;
};

using SearchNgramsEvaluatorTest =
    ::testing::TestWithParam<SearchNgramsEvaluatorTestCase>;

TEST_P(SearchNgramsEvaluatorTest, TestSearchNgramsEvaluate) {
  const SearchNgramsEvaluatorTestCase& test_case = GetParam();

  zetasql::Value query = zetasql::Value::String(test_case.query);
  zetasql::Value min_ngrams =
      test_case.min_ngrams.has_value()
          ? zetasql::Value::Int64(test_case.min_ngrams.value())
          : zetasql::Value::NullInt64();
  zetasql::Value min_ngrams_percent =
      test_case.min_ngrams_percent.has_value()
          ? zetasql::Value::Double(test_case.min_ngrams_percent.value())
          : zetasql::Value::NullDouble();

  std::vector<zetasql::Value> args{TokenListFromStrings(test_case.tokens),
                                     query, min_ngrams, min_ngrams_percent};

  absl::StatusOr<zetasql::Value> result =
      SearchNgramsEvaluator::Evaluate(args);
  ZETASQL_EXPECT_OK(result.status());
  EXPECT_EQ(result.value().bool_value(), test_case.expected_result);
};

INSTANTIATE_TEST_SUITE_P(
    SearchNgramsEvaluatorTestSuite, SearchNgramsEvaluatorTest,
    testing::ValuesIn<SearchNgramsEvaluatorTestCase>({
        {{"ngrams-4-1-0", "s", "p", "a", "n", "sp", "pa", "an", "spa", "pan",
          "span"},
         "span",
         2,
         0,
         true},
        {{"ngrams-4-1-0", "s", "p", "a", "n", "sp", "pa", "an", "spa", "pan",
          "span"},
         "span",
         0,
         100,
         true},
        {{"ngrams-4-1-0", "s", "p", "a", "n", "sp", "pa", "an", "spa", "pan",
          "span"},
         "spaz",
         2,
         60,
         false},
        {{"ngrams-4-1-0", "s", "p", "a", "n", "sp", "pa", "an", "spa", "pan",
          "span"},
         "spaz",
         0,
         60,
         false},
        {{"ngrams-4-1-0", "s", "p", "a", "n", "sp", "pa", "an", "spa", "pan",
          "span"},
         "spaz",
         0,
         70,
         false},
        {{"ngrams-4-1-0", "s", "p", "a", "n", "sp", "pa", "an", "spa", "pan",
          "span"},
         "spur",
         4,
         0,
         false},
        {{"substring-3-1-0", "foo", "bar"}, "foo+bar=baz", 2, 0, true},
        {{"substring-3-1-0", "foo", "bar"}, "foo+bar=baz", 3, 0, false},
        // Test cases for concatenated tokenlists
        {{"ngrams-4-1-0", "s",    "p",    "a",   "n",    "sp",
          "pa",           "an",   "spa",  "pan", "span", kGapString,
          "ngrams-5-1-0", "c",    "l",    "o",   "u",    "d",
          "cl",           "lo",   "ou",   "ud",  "clo",  "lou",
          "ould",         "loud", "cloud"},
         "spancloud",
         1,
         0,
         true},
        {{"ngrams-2-2-1", "sp", "pa", "an", kGapString, "ngrams-2-2-0", "cl",
          "lo", "ou", "ud"},
         "spnaclodu",
         5,
         0,
         false},
        {{"ngrams-3-1-0", "s", "p", "a", "n", "sp", "pa", "an", "spa", "pan",
          "span", kGapString, "substring-2-1-0", "foo", "bar"},
         "spaz;foo+bar=baz",
         5,
         0,
         true},
        {{"ngrams-4-1-0", "s", "p", "a", "n", "sp", "pa", "an", "spa", "pan",
          "span", kGapString, "substring-3-1-0", "foo", "bar"},
         "spaz;foo+bar=baz",
         0,
         50,
         true},
        {{"ngrams-3-3-0", "mis", "iss", "ssi", "sis", "iss", "ssi", "sip",
          "ipi"},
         "ssi",
         1,
         0,
         true},
        {{"ngrams-3-3-0", "mis", "iss", "ssi", "sis", "iss", "ssi", "sip",
          "ipi"},
         "ssi",
         2,
         0,
         true},
        {{"ngrams-2-2-0", "cd"}, "cd", 3, 0, true},
    }));

}  // namespace search
}  // namespace query
}  // namespace backend
}  // namespace emulator
}  // namespace spanner
}  // namespace google
