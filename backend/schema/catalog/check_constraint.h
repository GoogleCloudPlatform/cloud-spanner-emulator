//
// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

#ifndef THIRD_PARTY_CLOUD_SPANNER_EMULATOR_BACKEND_SCHEMA_CATALOG_CHECK_CONSTRAINT_H_
#define THIRD_PARTY_CLOUD_SPANNER_EMULATOR_BACKEND_SCHEMA_CATALOG_CHECK_CONSTRAINT_H_

#include "backend/schema/catalog/column.h"
#include "backend/schema/graph/schema_node.h"

namespace google {
namespace spanner {
namespace emulator {
namespace backend {

class CheckConstraint : public SchemaNode {
 public:
  // Returns the name of this check constraint. Constraint names are optional
  // for check constraint. A name is generated by Spanner for unnamed check
  // constraint.
  const std::string& Name() const { return constraint_name_; }

  // Returns true if the name is generated, otherwise returns false.
  const bool has_generated_name() const { return has_generated_name_; }

  // Returns the expression.
  const std::string& expression() const { return expression_; }

  absl::Span<const Column* const> dependent_columns() const {
    return dependent_columns_;
  }

  // Returns the table containing the column.
  const Table* table() const { return table_; }

  // SchemaNode interface implementation.
  // ------------------------------------

  std::optional<SchemaNameInfo> GetSchemaNameInfo() const override {
    return SchemaNameInfo{
        .name = Name(), .kind = "Check Constraint", .global = true};
  }

  absl::Status Validate(SchemaValidationContext* context) const override;

  absl::Status ValidateUpdate(
      const google::spanner::emulator::backend::SchemaNode* orig,
      SchemaValidationContext* context) const override;

  std::string DebugString() const override;

  class Builder;

 private:
  friend class CheckConstraintValidator;

  using ValidationFn = std::function<absl::Status(const CheckConstraint*,
                                                  SchemaValidationContext*)>;
  using UpdateValidationFn =
      std::function<absl::Status(const CheckConstraint*, const CheckConstraint*,
                                 SchemaValidationContext*)>;

  CheckConstraint(const ValidationFn& validate,
                  const UpdateValidationFn& validate_update)
      : validate_(validate), validate_update_(validate_update) {}
  CheckConstraint(const CheckConstraint&) = default;

  std::unique_ptr<SchemaNode> ShallowClone() const override {
    return absl::WrapUnique(new CheckConstraint(*this));
  }

  absl::Status DeepClone(
      SchemaGraphEditor* editor,
      const google::spanner::emulator::backend::SchemaNode* orig) override;

  // Validation delegates.
  const ValidationFn validate_;
  const UpdateValidationFn validate_update_;

  std::string constraint_name_;
  bool has_generated_name_;

  std::string expression_;

  // This is the list of columns that are referenced in its expression.
  std::vector<const Column*> dependent_columns_;

  // The table containing the column.
  const Table* table_ = nullptr;
};

}  // namespace backend
}  // namespace emulator
}  // namespace spanner
}  // namespace google
#endif  // THIRD_PARTY_CLOUD_SPANNER_EMULATOR_BACKEND_SCHEMA_CATALOG_CHECK_CONSTRAINT_H_
