//
// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto2";

package google.spanner.emulator.backend.ddl;



message DDLStatement {
  oneof statement {
    // Database statements.
    CreateDatabase create_database = 1;


    // Table statements.
    CreateTable create_table = 8;
    SetColumnOptions set_column_options = 10;
    AlterTable alter_table = 11;
    DropTable drop_table = 12;

    // Index statements.
    CreateIndex create_index = 13;
    DropIndex drop_index = 16;

    // Change Stream statements.
    CreateChangeStream create_change_stream = 56;
    AlterChangeStream alter_change_stream = 67;
    DropChangeStream drop_change_stream = 60;

    // Function statements.
    CreateFunction create_function = 34;
    DropFunction drop_function = 36;

    // Statistics statements.
    Analyze analyze = 75;
  }
}

// Used for all SET OPTIONS statements.
message SetOption {
  optional string option_name = 1;  // Field name within *OptionsProto.
  // Option value: exactly one of the following fields must be present.
  optional bool null_value = 2;  // Clears the field regardless of type.
  optional bool bool_value = 3;
  optional int64 int64_value = 4;
  optional double double_value = 8;
  optional string string_value = 5;
}



message ColumnDefinition {
  // Required in all cases, except when stored as part of array_subtype.
  optional string column_name = 1;

  enum Type {
    NONE = 0;

    DOUBLE = 1;
    INT64 = 3;
    BOOL = 7;
    STRING = 8;
    BYTES = 10;
    TIMESTAMP = 18;
    DATE = 15;
    ARRAY = 16;
    NUMERIC = 19;
    JSON = 20;



  }

  optional Type type = 2;
  optional bool not_null = 6;
  // User-specified max length for this column (STRING, BYTES
  // only).
  // This field will only be set if the user defines a specific column length;
  // if 'MAX' is specified, it will be unset.
  optional int64 length = 7;

  repeated SetOption set_options = 8;

  optional ColumnDefinition array_subtype = 9;  // Set iff type == ARRAY.

  // True if the column is marked as hidden. Hidden columns won't show up in
  // SELECT * queries.
  optional bool hidden = 10;

  // Stores information about generated columns.
  message GeneratedColumnDefinition {
    // Googlesql string for the generated column.
    optional string expression = 1;

    // True if the generated column is defined as STORED.
    optional bool stored = 2;

  }

  optional GeneratedColumnDefinition generated_column = 11;

  message ColumnDefaultDefinition {
    // Googlesql string for the default expression.
    optional string expression = 1;

  }

  optional ColumnDefaultDefinition column_default = 12;
}

// Used for CREATE TABLE and CREATE INDEX
message KeyPartClause {
  // Name of key component.  May refer to a column name (e.g. dob), or
  // to a protocol-buffer stored scalar (e.g. data_proto.name).
  optional string key_name = 1;

  enum Order {
    ASC = 0;   // Ascending direction with NULLs sorted first.
    DESC = 1;  // Descending direction with NULLs sorted last.
  }
  // The ordering specified by this key component (if at all)
  optional Order order = 2 [default = ASC];
}

message ForeignKey {
  // Optional name of the foreign key constraint.
  optional string constraint_name = 1;

  // One or more names of columns of the table defining the foreign key.
  repeated string constrained_column_name = 2;

  // Dotted path name of the referenced table.
  optional string referenced_table_name = 3;

  // The names of columns of the referenced table. The number of referenced
  // column names is equal to the number of constrained column names.
  repeated string referenced_column_name = 4;

  // Whether or not the constraint is enforced.
  optional bool enforced = 5;

  // Referential actions.
  enum Action {
    reserved 2, 4, 5;
    ACTION_UNSPECIFIED = 0;  // Unspecified action enum.
    NO_ACTION = 1;           // Referential checks only; default if unspecified.
    CASCADE = 3;             // Constrained rows updated or deleted.
  }
  optional Action on_delete = 7;
}

message Function {
  enum Kind {
    INVALID_KIND = 0;
    VIEW = 1;
  }

  enum Language {
    UNSPECIFIED_LANGUAGE = 0;
    SQL = 1;
  }

  enum SqlSecurity {
    UNSPECIFIED_SQL_SECURITY = 0;
    INVOKER = 2;
  }
}

message CreateFunction {
  optional string function_name = 1;
  optional Function.Kind function_kind = 3;
  optional bool is_or_replace = 4;
  optional Function.SqlSecurity sql_security = 5;
  optional string sql_body = 9;
  optional Function.Language language = 10;
}

message DropFunction {
  optional string function_name = 1;
  optional Function.Kind function_kind = 2;
}

message CheckConstraint {
  // Name of the check constraint.
  optional string name = 1;

  // Required
  // GoogleSQL string for the constraint.
  optional string expression = 2;

  // True if the constraint is enforced.
  optional bool enforced = 3;

}

// Used for CREATE TABLE.
message InterleaveClause {
  // The name of the table in which this table/queue is interleaved. It is
  // referred to as the interleaving table.
  optional string table_name = 1;

  enum Type {
    // Interleave this table in the parent table, requiring that the parent row
    // exists for the child row to exist.
    IN_PARENT = 0;
  }
  // Type of the relationship between the two tables involved.
  optional Type type = 4 [default = IN_PARENT];

  enum Action {
    NO_ACTION = 0;

    CASCADE = 1;
  }
  optional Action on_delete = 3;
}

message CreateDatabase {
  optional string db_name = 4;
}


message RowDeletionPolicy {
  // The timestamp column based on which we set the policy.
  optional string column_name = 1;

  // If now - 'column_name' exceeds 'older_than', the row will be deleted.
  optional DDLTimeLengthProto older_than = 2;

  // Scan data and delete rows every 'interval'.
  // Note that it is possible that we could skip intervals.
  optional DDLTimeLengthProto interval = 3;
}

enum ExistenceModifier {
  // Creation/deletion fails if the thing to be created already exists.
  NONE = 0;
  // Creation is skipped without error if the thing to be created exists
  // already.
  IF_NOT_EXISTS = 1;
  // For CREATE OR REPLACE statements, if the thing being created already exists
  // then it will be deleted first, then recreated.
  OR_REPLACE = 2;
  // Deletion is skippped without error if the thing to be dropped doesn't
  // exist.
  IF_EXISTS = 3;
}

message CreateTable {
  optional string table_name = 1;
  repeated ColumnDefinition column = 2;
  repeated KeyPartClause primary_key = 3;
  repeated ForeignKey foreign_key = 10;
  repeated CheckConstraint check_constraint = 11;
  optional InterleaveClause interleave_clause = 7;
  optional RowDeletionPolicy row_deletion_policy = 9;
  // How to handle creation if the table already exists.
  optional ExistenceModifier existence_modifier = 13;
}

message ChangeStreamForClause {
  message TrackedTables {
    message Entry {
      // Name of the tracked table.
      optional string table_name = 1;

      message TrackedColumns {
        // Name of the tracked columns. Primary key columns are tracked by
        // default and are not listed here. If `column_name` is empty, only the
        // primary key columns of the table are tracked.
        repeated string column_name = 1;
      }

      oneof track_type {
        // If set, value must be true, and all columns of the table are tracked
        // implicitly.
        bool all_columns = 2;
        // If exists, only columns listed in `tracked_columns` and the primary
        // key columns of the table are tracked.
        TrackedColumns tracked_columns = 3;
      }
    }

    // Tracked tables and information about which of their columns are tracked.
    repeated Entry table_entry = 1;
  }

  oneof for_clause_type {
    // If set, the value must be true, signifying all trackable database objects
    // are tracked implicitly. Non-trackable database objects include:
    //   * internal system tables/queues
    //   * queues
    //   * indexes
    //   * views / materialized views
    //   * stored or non-stored generated columns (except for STORED VOLATILE
    //     columns)
    bool all = 1;

    // If exists, only explicitly listed tables are tracked.
    TrackedTables tracked_tables = 2;
  }
}

message CreateChangeStream {
  optional string change_stream_name = 1;
  optional ChangeStreamForClause for_clause = 2;
  repeated SetOption set_options = 3;
}

message SetColumnOptions {
  message ColumnPath {
    optional string table_name = 1;
    optional string column_name = 2;
  }
  repeated ColumnPath column_path = 1;
  repeated SetOption options = 3;
}

message DropTable {
  optional string table_name = 1;
  optional ExistenceModifier existence_modifier = 2;
}

message DropChangeStream {
  optional string change_stream_name = 1;
}

message AlterTable {
  optional string table_name = 1;

  message AddColumn {
    optional ColumnDefinition column = 1;
    // How to handle the ADD COLUMN if the column is already part of the table.
    optional ExistenceModifier existence_modifier = 2;
  }
  message AlterColumn {
    optional ColumnDefinition column = 1;  // Column name given here.
    enum AlterColumnOp {
      SET_DEFAULT = 1;
      DROP_DEFAULT = 2;
    }
    // Defines the specific alter operation on the column.
    optional AlterColumnOp operation = 2;
  }
  message SetInterleaveClause {
    optional InterleaveClause interleave_clause = 1;
  }
  message SetOnDelete {
    optional InterleaveClause.Action action = 1;
  }
  message DropRowDeletionPolicy {}
  message DropConstraint {
    optional string name = 1;
  }
  message AddForeignKey {
    optional ForeignKey foreign_key = 1;
  }
  message AddCheckConstraint {
    optional CheckConstraint check_constraint = 1;
  }
  oneof alter_type {
    AddColumn add_column = 3;
    string drop_column = 4;
    AlterColumn alter_column = 5;
    SetInterleaveClause set_interleave_clause = 18;
    SetOnDelete set_on_delete = 10;
    RowDeletionPolicy add_row_deletion_policy = 11;
    RowDeletionPolicy alter_row_deletion_policy = 12;
    DropRowDeletionPolicy drop_row_deletion_policy = 13;
    DropConstraint drop_constraint = 15;
    AddForeignKey add_foreign_key = 16;
    AddCheckConstraint add_check_constraint = 17;
  }
}

message AlterChangeStream {
  optional string change_stream_name = 1;

  message SetOptions {
    repeated SetOption options = 1;
  }

  oneof alter_type {
    ChangeStreamForClause set_for_clause = 2;
    SetOptions set_options = 3;
    // Only DROP FOR ALL is supported for now.
    ChangeStreamForClause drop_for_clause = 4;
  }
}

// ANALYZE is a special DDL operation that doesn't trigger a schema change in
// emulator. The emulator will accept it but perform no-op. This allows the same
// script to run in both emulator and production.
message Analyze {
  // Intentionally empty.
}

message StoredColumnDefinition {
  optional string name = 1;
}

message CreateIndex {
  optional string index_name = 1;
  optional string index_base_name = 2;
  repeated KeyPartClause key = 3;

  optional bool null_filtered = 5;

  // Not present for standard "global" indexes.
  optional string interleave_in_table = 6;

  optional bool unique = 10;

  // List of columns stored in the index.
  repeated StoredColumnDefinition stored_column_definition = 15;

  // Determines what to do if the index already exists. Defaults to an error.
  optional ExistenceModifier existence_modifier = 17;
}

message DropIndex {
  optional string index_name = 1;
  optional ExistenceModifier existence_modifier = 2;
}


message TokenColumnDefinition {
  // Required.
  optional KeyPartClause token_column = 1;
  repeated SetOption set_options = 2;
}

message CreateSearchIndex {
  // Required.
  optional string index_name = 1;
  // Required.
  optional string index_base_name = 2;
  // Each column here corresponds to one token index per secondary index.
  // They should exist in the base table already.
  repeated TokenColumnDefinition token_column_definition = 3;

  repeated KeyPartClause partition_by = 4;
  // Normally there will be at most a single order_by column listed here, but
  // if the user provides their own UID column, there could be up to two.
  repeated KeyPartClause order_by = 5;
  repeated string null_filtered_column = 6;
  optional string interleave_in_table = 7;
  repeated StoredColumnDefinition stored_column_definition = 8;
  repeated SetOption set_options = 9;
  optional bool null_filtered = 10;
}


message DDLTimeLengthProto {
  enum Unit {
    DAYS = 86400;  // 24 HOURS
  }

  optional int64 count = 1;
  optional Unit unit = 2;
}
