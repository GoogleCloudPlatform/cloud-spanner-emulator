# Basic foreign key syntax.
CREATE TABLE T (
  A BOOL,
) PRIMARY KEY(A);
CREATE TABLE U (
  X BOOL,
  CONSTRAINT C FOREIGN KEY(X) REFERENCES T(A),
) PRIMARY KEY(X);
==
# Keywords should work case-insensitive while preserving identifier case.
create table t (
  a bool,
) primary key(a);
create table u (
  x bool,
  constraint c foreign key(x) references t(a),
) primary key(x);
--
CREATE TABLE t (
  a BOOL,
) PRIMARY KEY(a);
CREATE TABLE u (
  x BOOL,
  CONSTRAINT c FOREIGN KEY(x) REFERENCES t(a),
) PRIMARY KEY(x);
==
# Different shapes.
CREATE TABLE T (
  A INT64 NOT NULL,
  B STRING(MAX) NOT NULL,
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  Y STRING(MAX),
  Z INT64,
  CONSTRAINT FK FOREIGN KEY(Y, Z) REFERENCES T(B, A),
  FOREIGN KEY(Y) REFERENCES T(B),
) PRIMARY KEY(X);
==
# Different string lengths.
CREATE TABLE T (
  A STRING(MAX) NOT NULL,
) PRIMARY KEY(A);
CREATE TABLE U (
  X STRING(32) NOT NULL,
  FOREIGN KEY(X) REFERENCES T(A),
) PRIMARY KEY(X);
==
# Alter constrained string length.
CREATE TABLE T (
  A STRING(MAX) NOT NULL,
) PRIMARY KEY(A);
CREATE TABLE U (
  X STRING(32) NOT NULL,
  FOREIGN KEY(X) REFERENCES T(A),
) PRIMARY KEY(X);
ALTER TABLE U ALTER COLUMN X STRING(64) NOT NULL;
--
CREATE TABLE T (
  A STRING(MAX) NOT NULL,
) PRIMARY KEY(A);
CREATE TABLE U (
  X STRING(64) NOT NULL,
  FOREIGN KEY(X) REFERENCES T(A),
) PRIMARY KEY(X);
==
# Alter referenced string length.
CREATE TABLE T (
  A STRING(MAX) NOT NULL,
) PRIMARY KEY(A);
CREATE TABLE U (
  X STRING(32) NOT NULL,
  FOREIGN KEY(X) REFERENCES T(A),
) PRIMARY KEY(X);
ALTER TABLE T ALTER COLUMN A STRING(64) NOT NULL;
--
CREATE TABLE T (
  A STRING(64) NOT NULL,
) PRIMARY KEY(A);
CREATE TABLE U (
  X STRING(32) NOT NULL,
  FOREIGN KEY(X) REFERENCES T(A),
) PRIMARY KEY(X);
==
# Enable enforcement using primary key prefixes.
CREATE TABLE T (
  A INT64 NOT NULL,
  B INT64,
  C INT64 NOT NULL,
) PRIMARY KEY(A DESC, B, C);
CREATE TABLE U (
  P INT64 NOT NULL,
  Q INT64 NOT NULL,
  R INT64 NOT NULL,
# Mapped primary key order is the same (usable).
  FOREIGN KEY(P, R, Q) REFERENCES T(A, C, B),
# Mapped primary key order is different (not usable).
  FOREIGN KEY(P, R, Q) REFERENCES T(A, B, C),
# Prefix subset of primary keys (usable).
  FOREIGN KEY(P, Q) REFERENCES T(A, B),
# Non-prefix subset of constrained primary keys (not usable).
  FOREIGN KEY(Q, R) REFERENCES T(A, B),
# Non-prefix subset of referenced primary keys (not usable).
  FOREIGN KEY(P, Q) REFERENCES T(B, C),
) PRIMARY KEY(P, Q DESC, R);
==
# Number of constrained columns exceeds the number of primary key columns.
# Cannot use the constrained primary key.
CREATE TABLE T (
  A INT64 NOT NULL,
  B INT64 NOT NULL,
) PRIMARY KEY(A, B);
CREATE TABLE U (
  X INT64 NOT NULL,
  Y INT64 NOT NULL,
  FOREIGN KEY(X, Y) REFERENCES T(A, B),
) PRIMARY KEY(X);
==
# Number of referenced columns exceeds the number of primary key columns.
# Cannot use the referenced primary key.
CREATE TABLE T (
  A INT64 NOT NULL,
  B INT64 NOT NULL,
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  Y INT64 NOT NULL,
  FOREIGN KEY(X, Y) REFERENCES T(A, B),
) PRIMARY KEY(X, Y);
==
# Nullable constrained primary key column.
# Cannot use the constrained primary key.
CREATE TABLE T (
  A INT64 NOT NULL,
  B INT64 NOT NULL,
) PRIMARY KEY(A, B);
CREATE TABLE U (
  X INT64 NOT NULL,
  Y INT64,
  FOREIGN KEY(X, Y) REFERENCES T(A, B),
) PRIMARY KEY(X, Y);
==
# Add foreign keys to existing tables.
CREATE TABLE T (
  A INT64 NOT NULL,
  B INT64 NOT NULL,
) PRIMARY KEY(A, B);
CREATE TABLE U (
  X INT64 NOT NULL,
  Y INT64 NOT NULL,
) PRIMARY KEY(X, Y);
# Unique, unnamed, enforced implied.
ALTER TABLE U ADD FOREIGN KEY(X) REFERENCES T(A);
# Unique, unnamed, enforced explicit, circular.
ALTER TABLE T ADD FOREIGN KEY(B) REFERENCES U(X);
# Duplicate (only possible with unnamed since names must be unique).
ALTER TABLE U ADD FOREIGN KEY(X) REFERENCES T(A);
# Named, enforced implied (duplicate with unnamed except the name).
ALTER TABLE U ADD CONSTRAINT C FOREIGN KEY(X) REFERENCES T(A);
# Named, enforced explicit, circular (duplicate with unnamed except the name).
ALTER TABLE T ADD CONSTRAINT D FOREIGN KEY(B) REFERENCES U(X);
--
CREATE TABLE T (
  A INT64 NOT NULL,
  B INT64 NOT NULL,
  FOREIGN KEY(B) REFERENCES U(X),
  CONSTRAINT D FOREIGN KEY(B) REFERENCES U(X),
) PRIMARY KEY(A, B);
CREATE TABLE U (
  X INT64 NOT NULL,
  Y INT64 NOT NULL,
  FOREIGN KEY(X) REFERENCES T(A),
  FOREIGN KEY(X) REFERENCES T(A),
  CONSTRAINT C FOREIGN KEY(X) REFERENCES T(A),
) PRIMARY KEY(X, Y);
==
# Drop foreign keys from existing tables.
CREATE TABLE T (
  A INT64 NOT NULL,
  B INT64 NOT NULL,
) PRIMARY KEY(A, B);
CREATE TABLE U (
  X INT64 NOT NULL,
  Y INT64 NOT NULL,
  FOREIGN KEY(X, Y) REFERENCES T(B, A),
  FOREIGN KEY(X, Y) REFERENCES T(B, A),
  CONSTRAINT D FOREIGN KEY(Y) REFERENCES T(B),
) PRIMARY KEY(X, Y);
ALTER TABLE T ADD CONSTRAINT C FOREIGN KEY(A) REFERENCES T(B);
ALTER TABLE T ADD CONSTRAINT E FOREIGN KEY(B) REFERENCES U(X);
# Drop a duplicate unnamed foreign key.
ALTER TABLE U DROP CONSTRAINT FK_U_T_FFADEDEE3430D435_2;
# Drop a named foreign key.
ALTER TABLE U DROP CONSTRAINT D;
# Drop a circular named foreign key.
ALTER TABLE T DROP CONSTRAINT E;
# Drop a self-referencing named foreign key.
ALTER TABLE T DROP CONSTRAINT C;
--
CREATE TABLE T (
  A INT64 NOT NULL,
  B INT64 NOT NULL,
) PRIMARY KEY(A, B);
CREATE TABLE U (
  X INT64 NOT NULL,
  Y INT64 NOT NULL,
  FOREIGN KEY(X, Y) REFERENCES T(B, A),
) PRIMARY KEY(X, Y);
==
# Drop table with foreign keys.
CREATE TABLE T (
  A INT64 NOT NULL,
  B INT64 NOT NULL,
) PRIMARY KEY(A, B);
CREATE TABLE U (
  X INT64 NOT NULL,
  Y INT64 NOT NULL,
  FOREIGN KEY(X, Y) REFERENCES T(B, A),
  FOREIGN KEY(X, Y) REFERENCES T(B, A),
  CONSTRAINT D FOREIGN KEY(Y) REFERENCES T(B),
) PRIMARY KEY(X, Y);
DROP TABLE U;
--
CREATE TABLE T (
  A INT64 NOT NULL,
  B INT64 NOT NULL,
) PRIMARY KEY(A, B);
==
# Referenced table not found.
# --regex
CREATE TABLE U (
  X INT64 NOT NULL,
  FOREIGN KEY(X) REFERENCES T(A)
) PRIMARY KEY(X);
--
ERROR:.* Table not found: T
==
# Duplicate schema name (CREATE TABLE).
# --regex
CREATE TABLE T (
  A INT64 NOT NULL
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  CONSTRAINT T FOREIGN KEY(X) REFERENCES T(A)
) PRIMARY KEY(X);
--
ERROR:.* Duplicate name in schema: T.
==
# Duplicate schema name (ALTER TABLE).
# --regex
CREATE TABLE T (
  A INT64 NOT NULL
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
) PRIMARY KEY(X);
ALTER TABLE U ADD CONSTRAINT T FOREIGN KEY(X) REFERENCES T(A);
--
ERROR:.* Duplicate name in schema: T.
==
# System schema name (CREATE TABLE).
# --regex
CREATE TABLE T (
  A INT64 NOT NULL
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  CONSTRAINT _T FOREIGN KEY(X) REFERENCES T(A)
) PRIMARY KEY(X);
--
ERROR:.* [Ff]oreign [Kk]ey name not valid: _T.
==
# System schema name (ALTER TABLE).
# --regex
CREATE TABLE T (
  A INT64 NOT NULL
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
) PRIMARY KEY(X);
ALTER TABLE U ADD CONSTRAINT _T FOREIGN KEY(X) REFERENCES T(A);
--
ERROR:.* [Ff]oreign [Kk]ey name not valid: _T.
==
# Duplicate constrained column usage.
# --regex
CREATE TABLE T (
  A INT64 NOT NULL,
  B INT64 NOT NULL
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  Y INT64 NOT NULL,
  FOREIGN KEY(X,X) REFERENCES T(A,B)
) PRIMARY KEY(X);
--
ERROR:.* Column `X` used more than once for table `U` in foreign key `FK_U_T_[A-F0-9_]+`.
==
# Duplicate referenced column usage.
# --regex
CREATE TABLE T (
  A INT64 NOT NULL,
  B INT64 NOT NULL,
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  Y INT64 NOT NULL,
  FOREIGN KEY(X,Y) REFERENCES T(A,A)
) PRIMARY KEY(X);
--
ERROR:.* Column `A` used more than once for table `T` in foreign key `FK_U_T_[A-F0-9_]+`.
==
# Mismatched number of constrained and referenced columns.
# --regex
CREATE TABLE T (
  A INT64 NOT NULL,
  B INT64 NOT NULL,
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  Y INT64 NOT NULL,
  FOREIGN KEY(X,Y) REFERENCES T(A)
) PRIMARY KEY(X);
--
ERROR:.* The number of columns are different for table `U` and table `T` in foreign key `FK_U_T_[A-F0-9_]+`.
==
# No constrained columns.
# --regex
CREATE TABLE T (
  A INT64 NOT NULL
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  FOREIGN KEY() REFERENCES T(A)
) PRIMARY KEY(X);
--
ERROR:.* Error parsing Spanner DDL statement: CREATE TABLE U \( X INT64 NOT NULL, FOREIGN KEY\(\) REFERENCES T\(A\) \) PRIMARY KEY\(X\) : Syntax error on line 4, column 15: Encountered '\)' while parsing: identifier
==
# No referenced columns.
# --regex
CREATE TABLE T (
  A INT64 NOT NULL
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  FOREIGN KEY(X) REFERENCES T()
) PRIMARY KEY(X);
--
ERROR:.* Error parsing Spanner DDL statement: CREATE TABLE U \( X INT64 NOT NULL, FOREIGN KEY\(X\) REFERENCES T\(\) \) PRIMARY KEY\(X\) : Syntax error on line 4, column 31: Encountered '\)' while parsing: identifier
==
# Constrained column not found.
# --regex
CREATE TABLE T (
  A INT64 NOT NULL
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  FOREIGN KEY(Y) REFERENCES T(A)
) PRIMARY KEY(X);
--
ERROR:.* Column `Y` not found for table `U` in foreign key `FK_U_T_[A-F0-9_]+`.
==
# Referenced column not found.
# --regex
CREATE TABLE T (
  A INT64 NOT NULL
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  FOREIGN KEY(X) REFERENCES T(B)
) PRIMARY KEY(X);
--
ERROR:.* Column `B` not found for table `T` in foreign key `FK_U_T_[A-F0-9_]+`.
==
# Different column types.
# --regex
CREATE TABLE T (
  A BOOL NOT NULL
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  FOREIGN KEY(X) REFERENCES T(A)
) PRIMARY KEY(X);
--
ERROR:.* The column types are different for column `X` of table `U` and column `A` of table `T` in foreign key `FK_U_T_[A-F0-9_]+`.
==
# Invalid constraint name.
# --regex
CREATE TABLE T (
  A BOOL NOT NULL,
) PRIMARY KEY(A);
CREATE TABLE U (
  X BOOL NOT NULL,
  CONSTRAINT PK_FK FOREIGN KEY(X) REFERENCES T(A)
) PRIMARY KEY(X);
--
ERROR:.* Invalid [Ff]oreign [Kk]ey name: PK_FK. Prefix PK_ cannot be used.
==
# Cannot drop referenced table.
# --regex
CREATE TABLE T (
  A INT64 NOT NULL
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  FOREIGN KEY(X) REFERENCES T(A)
) PRIMARY KEY(X);
CREATE TABLE V (
  Y INT64 NOT NULL,
  FOREIGN KEY(Y) REFERENCES T(A)
) PRIMARY KEY(Y);
DROP TABLE T;
--
ERROR:.* Cannot drop table `T`. It is referenced by one or more foreign keys: `FK_U_T_[A-F0-9_]+`, `FK_V_T_[A-F0-9_]+`. You must drop the foreign keys before dropping the table.
==
# Cannot alter constrained column's type.
# --regex
CREATE TABLE T (
  A INT64 NOT NULL
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  Y INT64 NOT NULL,
  FOREIGN KEY(Y) REFERENCES T(A)
) PRIMARY KEY(X);
ALTER TABLE U ALTER COLUMN Y FLOAT64 NOT NULL;
--
ERROR:.* Cannot change type of column `Y` from `INT64` to `FLOAT64`
==
# Cannot alter referenced column's type.
# --regex
CREATE TABLE T (
  A INT64 NOT NULL,
  B INT64 NOT NULL
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  FOREIGN KEY(X) REFERENCES T(B)
) PRIMARY KEY(X);
ALTER TABLE T ALTER COLUMN B FLOAT64 NOT NULL;
--
ERROR:.* Cannot change type of column `B` from `INT64` to `FLOAT64`
==
# Cannot alter referenced column's nullability.
# --regex
CREATE TABLE T (
  A INT64 NOT NULL,
  B INT64 NOT NULL,
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  FOREIGN KEY(X) REFERENCES T(B),
) PRIMARY KEY(X);
ALTER TABLE T ALTER COLUMN B INT64;
--
ERROR:.* Cannot change the nullability for column `B` of table `T`. It is used by one or more foreign keys: `FK_U_T_FFADEDEE3430D435_1`.
==
# Cannot alter constrained column's nullability.
# --regex
CREATE TABLE T (
  A INT64 NOT NULL,
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  Y INT64 NOT NULL,
  FOREIGN KEY(Y) REFERENCES T(A),
) PRIMARY KEY(X);
ALTER TABLE U ALTER COLUMN Y INT64;
--
ERROR:.* Cannot change the nullability for column `Y` of table `U`. It is used by one or more foreign keys: `FK_U_T_[A-F0-9_]+`.
==
# Cannot drop constrained column.
# --regex
CREATE TABLE T (
  A INT64 NOT NULL,
  B INT64 NOT NULL,
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  Y INT64 NOT NULL,
  FOREIGN KEY(Y) REFERENCES T(A),
  FOREIGN KEY(Y) REFERENCES T(B),
) PRIMARY KEY(X);
ALTER TABLE U DROP COLUMN Y;
--
ERROR:.* Cannot drop column `Y` from table `U`. It is used by one or more foreign keys: `FK_U_T_FFADEDEE3430D435_1`, `FK_U_T_FFADEDEE3430D435_2`. You must drop the foreign keys before dropping the column.
==
# Cannot drop referenced column.
# --regex
CREATE TABLE T (
  A INT64 NOT NULL,
  B INT64 NOT NULL,
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  FOREIGN KEY(X) REFERENCES T(B),
) PRIMARY KEY(X);
CREATE TABLE V (
  Y INT64 NOT NULL,
  FOREIGN KEY(Y) REFERENCES T(B),
) PRIMARY KEY(Y);
ALTER TABLE T DROP COLUMN B;
--
ERROR:.* Cannot drop column `B` from table `T`. It is used by one or more foreign keys: `FK_U_T_FFADEDEE3430D435_1`, `FK_V_T_A032F46D0AA7A2F1_1`. You must drop the foreign keys before dropping the column.
==
# Invalid column type.
# --regex
CREATE TABLE T (
  A INT64 NOT NULL,
  B ARRAY<INT64> NOT NULL
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  Y ARRAY<INT64> NOT NULL,
  FOREIGN KEY(Y) REFERENCES T(B)
) PRIMARY KEY(X);
--
ERROR:.* Column `Y` for foreign key `FK_U_T_FFADEDEE3430D435_1` on table `U` has an unsupported type.
==
# Invalid referencing commit timestamp.
# --regex
CREATE TABLE T (
  A INT64 NOT NULL,
  B TIMESTAMP NOT NULL,
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  Y TIMESTAMP NOT NULL OPTIONS(allow_commit_timestamp=true),
  FOREIGN KEY(Y) REFERENCES T(B)
) PRIMARY KEY(X);
--
ERROR:.* Commit timestamp column is not supported for column `Y` of table `U` in foreign key `FK_U_T_[A-F0-9_]+`.
==
# Invalid referenced commit timestamp.
# --regex
CREATE TABLE T (
  A INT64 NOT NULL,
  B TIMESTAMP NOT NULL OPTIONS(allow_commit_timestamp=true),
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  Y TIMESTAMP NOT NULL,
  FOREIGN KEY(Y) REFERENCES T(B)
) PRIMARY KEY(X);
--
ERROR:.* Commit timestamp column is not supported for column `B` of table `T` in foreign key `FK_U_T_[A-F0-9_]+`.
==
# Invalid set referencing commit timestamp.
# --regex
CREATE TABLE T (
  A INT64 NOT NULL,
  B TIMESTAMP,
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  Y TIMESTAMP,
  FOREIGN KEY(Y) REFERENCES T(B)
) PRIMARY KEY(X);
ALTER TABLE U ALTER COLUMN Y SET OPTIONS (allow_commit_timestamp = true);
--
ERROR:.* Cannot set the commit_timestamp option for column `Y` of table `U`. It is used by one or more foreign keys: `FK_U_T_[A-F0-9_]+`.
==
# Invalid set referenced commit timestamp.
# --regex
CREATE TABLE T (
  A INT64 NOT NULL,
  B TIMESTAMP,
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  Y TIMESTAMP,
  FOREIGN KEY(Y) REFERENCES T(B)
) PRIMARY KEY(X);
ALTER TABLE T ALTER COLUMN B SET OPTIONS (allow_commit_timestamp = true);
--
ERROR:.* Cannot set the commit_timestamp option for column `B` of table `T`. It is used by one or more foreign keys: `FK_U_T_[A-F0-9_]+`.
==
# Constraint not found.
# --regex
CREATE TABLE T (
  A INT64 NOT NULL,
) PRIMARY KEY(A);
ALTER TABLE T DROP CONSTRAINT C;
--
ERROR:.* C is not a constraint in T
==
# Create table with duplicate constraint names.
# --regex
CREATE TABLE T (
  A INT64 NOT NULL,
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  CONSTRAINT C FOREIGN KEY(X) REFERENCES T(A),
  CONSTRAINT C FOREIGN KEY(X) REFERENCES T(A),
) PRIMARY KEY(X);
--
ERROR:.* Duplicate name in schema: C.
==
# Add duplicate constraint names.
# --regex
CREATE TABLE T (
  A INT64 NOT NULL,
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  CONSTRAINT C FOREIGN KEY(X) REFERENCES T(A),
) PRIMARY KEY(X);
ALTER TABLE T ADD CONSTRAINT C FOREIGN KEY(A) REFERENCES U(X);
--
ERROR:.* Duplicate name in schema: C.
==
# Cannot drop constrained table's backing index.
# --regex
CREATE TABLE T (
  A INT64 NOT NULL,
  B INT64 NOT NULL,
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  Y INT64 NOT NULL,
  FOREIGN KEY(Y) REFERENCES T(A),
) PRIMARY KEY(X);
DROP INDEX IDX_U_Y_F59F82AF5FD70C80;
--
ERROR:.* Cannot drop index `IDX_U_Y_F59F82AF5FD70C80`. It is in use by foreign keys: `FK_U_T_FFADEDEE3430D435_1`.
==
# Cannot drop referenced table's backing index.
# --regex
CREATE TABLE T (
  A INT64 NOT NULL,
  B INT64 NOT NULL,
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  FOREIGN KEY(X) REFERENCES T(B),
) PRIMARY KEY(X);
DROP INDEX IDX_T_B_U_8EB179EFA3EE9706;
--
ERROR:.* Cannot drop index `IDX_T_B_U_8EB179EFA3EE9706`. It is in use by foreign keys: `FK_U_T_FFADEDEE3430D435_1`.
==
