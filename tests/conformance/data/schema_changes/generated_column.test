CREATE TABLE Users (
  UserId STRING(MAX) NOT NULL,
  Name STRING(MAX),
  NameAlias STRING(MAX),
  Age INT64,
  AgePlusOne INT64 AS (Age+1) STORED,
) PRIMARY KEY(UserId);
ALTER TABLE Users ADD COLUMN AgePlusTwo INT64 AS (Age+2) STORED;
--
CREATE TABLE Users (
  UserId STRING(MAX) NOT NULL,
  Name STRING(MAX),
  NameAlias STRING(MAX),
  Age INT64,
  AgePlusOne INT64 AS (Age+1) STORED,
  AgePlusTwo INT64 AS (Age+2) STORED,
) PRIMARY KEY(UserId);
==
# Expression on duplicate column.
CREATE TABLE t (
  id INT64 NOT NULL,
  a STRING(MAX) AS (CONCAT(b,b)) STORED,
  b STRING(MAX) AS (c) STORED,
  c STRING(MAX),
) PRIMARY KEY(id);
==
# Two dependencies from the same function
CREATE TABLE t (
  id INT64 NOT NULL,
  c STRING(MAX) AS (CONCAT(b, d)) STORED,
  b STRING(MAX) AS (CONCAT(a)) STORED,
  a STRING(MAX),
  d STRING(MAX),
  e STRING(MAX),
) PRIMARY KEY(id);
==
# Interesting graph without cycles
CREATE TABLE t (
  id INT64 NOT NULL,
  a STRING(MAX) AS (b) STORED,
  b STRING(MAX) AS (CONCAT(c, d)) STORED,
  c STRING(MAX),
  d STRING(MAX) AS (c) STORED,
) PRIMARY KEY(id);
==
# Generated column definition has a soft type mismatch
CREATE TABLE GeneratedColumnDataCoalescing (
  id STRING(MAX) NOT NULL,
  i64 INT64,
  gen_i64_to_f64 FLOAT64 AS (i64) STORED,
) PRIMARY KEY(id);
==
# Dropping generated column before column that is used.
CREATE TABLE T (
  id INT64,
  a INT64,
  expr INT64 AS (a) STORED,
) PRIMARY KEY(id);
ALTER TABLE T DROP COLUMN expr;
ALTER TABLE T DROP COLUMN a;
--
CREATE TABLE T (
  id INT64,
) PRIMARY KEY(id);
==
# SAFE_DIVIDE function.
CREATE TABLE Network (
  id INT64,
  int_field1 INT64,
  int_field2 INT64,
  net_mask FLOAT64 AS (SAFE_DIVIDE(int_field1, int_field2)) STORED,
) PRIMARY KEY(id);
==
# SAFE functions.
CREATE TABLE T (
  id INT64,
  string_field STRING(MAX),
  gen BYTES(MAX) AS (SAFE.MD5(string_field)) STORED,
) PRIMARY KEY(id);
==
# allow_commit_timestamp = false is allowed on stored generated columns and
# their dependencies.
CREATE TABLE T (
  id INT64,
  ts TIMESTAMP OPTIONS (
    allow_commit_timestamp = false
  ),
  expr TIMESTAMP AS (ts) STORED OPTIONS (
    allow_commit_timestamp = false
  ),
) PRIMARY KEY(id);
==
# Generate a column using any built-in GoogleSQL function which is not supported
# by spanner. This test ensures query_validator runs on the column generation
# expression.
# --regex
CREATE TABLE T (
  id INT64,
  data BYTES(MAX),
  gen INT64 AS (ASCII(data)) STORED,
) PRIMARY KEY(id);
--
ERROR: Error parsing the definition of generated column `T`.`gen`: Unsupported built-in function: (ascii|ASCII).*
==
# NOT NULL.
CREATE TABLE T (
  id INT64,
  expr INT64 NOT NULL AS (1) STORED,
) PRIMARY KEY(id);
==
# ALTER to NOT NULL.
CREATE TABLE T (
  id INT64,
  expr INT64 AS (1) STORED,
) PRIMARY KEY(id);
ALTER TABLE T ALTER COLUMN expr INT64 NOT NULL AS (1) STORED;
--
CREATE TABLE T (
  id INT64,
  expr INT64 NOT NULL AS (1) STORED,
) PRIMARY KEY(id);
==
# ADD generated column with NOT NULL.
CREATE TABLE T (
  id INT64
) PRIMARY KEY(id);
ALTER TABLE T ADD COLUMN expr INT64 NOT NULL AS (1) STORED;
--
CREATE TABLE T (
  id INT64,
  expr INT64 NOT NULL AS (1) STORED,
) PRIMARY KEY(id);
==
# ALTER to remove NOT NULL.
CREATE TABLE T (
  id INT64,
  expr INT64 NOT NULL AS (1) STORED,
) PRIMARY KEY(id);
ALTER TABLE T ALTER COLUMN expr INT64 AS (1) STORED;
--
CREATE TABLE T (
  id INT64,
  expr INT64 AS (1) STORED,
) PRIMARY KEY(id);
==
# CREATE INDEX.
CREATE TABLE T1 (
  Id INT64 NOT NULL,
  Value STRING(MAX),
  ValueGen STRING(MAX) AS (CONCAT('[', Value, ']')) STORED,
) PRIMARY KEY(Id);
CREATE INDEX T1ByValueGen ON T1(ValueGen);
CREATE NULL_FILTERED INDEX T1ByValueGenNotNull ON T1(ValueGen);
CREATE INDEX T1ByValueStoringValueGen ON T1(Value) STORING (ValueGen);
CREATE NULL_FILTERED INDEX T1ByValueStoringValueGenNotNull ON T1(Value) STORING (ValueGen);
==
# Specifying string size on a stored generated column.
CREATE TABLE T (
  id INT64,
  name STRING(64),
  expr STRING(64) AS (name) STORED,
) PRIMARY KEY(id);
==
# Cannot change the expression of a STORED generated column.
# --regex
CREATE TABLE Users (
  id INT64 NOT NULL,
  UserName STRING(MAX),
  id_plus_one INT64 AS (id + 1) STORED
) PRIMARY KEY(id);
ALTER TABLE Users ALTER COLUMN id_plus_one INT64 AS (id * 2) STORED;
--
ERROR: Cannot change the expression of a generated column `Users.id_plus_one` because it is stored or (has|have) other dependencies.?
==
# Cannot convert a regular column to a generated column
CREATE TABLE Users (
  id INT64 NOT NULL,
  UserName STRING(MAX),
  id_plus_one INT64
) PRIMARY KEY(id);
ALTER TABLE Users ALTER COLUMN id_plus_one INT64 AS (id + 1) STORED;
--
ERROR: Cannot convert column `Users.id_plus_one` to a generated column.
==
# Cannot convert a generated column to a regular column
CREATE TABLE Users (
  id INT64 NOT NULL,
  UserName STRING(MAX),
  id_plus_one INT64 AS (id + 1) STORED
) PRIMARY KEY(id);
ALTER TABLE Users ALTER COLUMN id_plus_one INT64;
--
ERROR: Cannot convert generated column `Users.id_plus_one` to a regular column.
==
# Cannot change the STOREDness of a generated column.
CREATE TABLE Users (
  id INT64 NOT NULL,
  UserName STRING(MAX),
  id_plus_one INT64 AS (id + 1) STORED
) PRIMARY KEY(id);
ALTER TABLE Users ALTER COLUMN id_plus_one INT64 AS (id + 1);
--
ERROR: Generated column `id_plus_one` without the STORED attribute is not supported.
==
# Generated column definition uses an unknown column.
CREATE TABLE Users (
  id INT64 NOT NULL,
  UserName STRING(MAX),
  id_plus_one INT64 AS (id1 + 1) STORED,
) PRIMARY KEY(id);
--
ERROR: Error parsing the definition of generated column `Users`.`id_plus_one`: Unrecognized name: id1 [at 1:2]
(id1 + 1)
 ^
==
# Generated column definition uses an unknown column.
CREATE TABLE Users (
  id INT64 NOT NULL,
  UserName STRING(MAX)
) PRIMARY KEY(id);
ALTER TABLE Users ADD COLUMN new_column INT64 AS (unknown_column + 1) STORED;
--
ERROR: Error parsing the definition of generated column `Users`.`new_column`: Unrecognized name: unknown_column [at 1:2]
(unknown_column + 1)
 ^
==
# Change the type of a stored generated column to a different one.
CREATE TABLE T (
  id INT64 NOT NULL,
  expr STRING(MAX) AS (ERROR("")) STORED,
) PRIMARY KEY(id);
ALTER TABLE T ALTER COLUMN expr BYTES(MAX) AS (ERROR("")) STORED;
--
ERROR: Cannot change the data type of a stored generated column `T.expr`.
==
# Change the type of a stored generated column to a different one (array).
CREATE TABLE T (
  id INT64 NOT NULL,
  expr ARRAY<STRING(MAX)> AS ([]) STORED,
) PRIMARY KEY(id);
ALTER TABLE T ALTER COLUMN expr ARRAY<BYTES(MAX)> AS ([]) STORED;
--
ERROR: Cannot change the data type of a stored generated column `T.expr`.
==
# Change the type of a column that is used by a stored generated column.
CREATE TABLE T (
  id INT64 NOT NULL,
  a STRING(MAX),
  b BYTES(MAX) AS (CAST(a AS BYTES)) STORED,
) PRIMARY KEY(id);
ALTER TABLE T ALTER COLUMN a BYTES(MAX);
--
ERROR: Cannot change the data type of column `a`, which has a dependent stored generated column.
==
# Change the subtype of an array column that is used by a stored generated column
CREATE TABLE T (
  id INT64 NOT NULL,
  a ARRAY<STRING(MAX)>,
  b BYTES(MAX) AS (CAST(a[OFFSET(0)] AS BYTES)) STORED,
) PRIMARY KEY(id);
ALTER TABLE T ALTER COLUMN a ARRAY<BYTES(MAX)>;
--
ERROR: Cannot change the data type of column `a`, which has a dependent stored generated column.
==
# Generated column definition has a type mismatch
CREATE TABLE Users (
  id INT64 NOT NULL,
  UserName STRING(MAX),
  id_plus_one INT64 AS (SUBSTR(UserName, 1)) STORED,
) PRIMARY KEY(id);
--
ERROR: Error parsing the definition of generated column `Users`.`id_plus_one`: Expected type INT64; found STRING [at 1:2]
(SUBSTR(UserName, 1))
 ^
==
# Generated column definition has a type mismatch
CREATE TABLE GeneratedColumnDataCoalescing (
  id STRING(MAX) NOT NULL,
  i64 INT64,
  gen_i64_to_b BOOL as (i64) STORED,
) PRIMARY KEY (id);
--
ERROR: Error parsing the definition of generated column `GeneratedColumnDataCoalescing`.`gen_i64_to_b`: Expected type BOOL; found INT64 [at 1:2]
(i64)
 ^
==
# Generated column in primary key.
CREATE TABLE Users (
  id INT64 NOT NULL,
  id_plus_one INT64 AS (id + 1) STORED
) PRIMARY KEY(id_plus_one);
--
ERROR: Generated column `Users.id_plus_one` cannot be part of the primary key.
==
# Generated column definition has a simple cycle
CREATE TABLE T (
  id INT64 NOT NULL,
  a INT64 as (b) STORED,
  b INT64 as (A) STORED
) PRIMARY KEY(id);
--
ERROR: Cycle detected while analysing generated column, which include objects (a,b)
==
# Generated column definition has a self reference
create table t (
  id INT64 NOT NULL,
  a INT64 as (a+1) STORED
) PRIMARY KEY(id);
--
ERROR: Cycle detected while analysing generated column, which include objects (a)
==
# Generated Columns: More elaborate cycle (c -> a -> b -> c)
create table t (
  id INT64 NOT NULL,
  d INT64,
  c INT64 as (a) STORED,
  b INT64 as (c) STORED,
  a INT64 as (b) STORED
) PRIMARY KEY(id);
--
ERROR: Cycle detected while analysing generated column, which include objects (c,a,b)
==
# Generated Columns: Cycle a->b->c with start node being b.
create table t (
  id INT64 NOT NULL,
  b INT64 as (c) STORED,
  c INT64 as (a) STORED,
  a INT64 as (b) STORED
) PRIMARY KEY(id);
--
ERROR: Cycle detected while analysing generated column, which include objects (b,c,a)
==
# Interesting graph with cycles
#   A -> B <- C<-|
#         \-> D--|
create table t (
  id INT64 NOT NULL,
  a INT64 as (b) STORED,
  b INT64 as (d) STORED,
  c INT64 as (b) STORED,
  d INT64 as (c) STORED
) PRIMARY KEY(id);
--
ERROR: Cycle detected while analysing generated column, which include objects (a,b,d,c)
==
# Cannot add a new column that introduces a cycle (self)
CREATE TABLE Users (
  id INT64 NOT NULL,
  userName STRING(MAX)
) PRIMARY KEY(id);
ALTER TABLE Users ADD COLUMN col INT64 AS (col+1) STORED;
--
ERROR: Cycle detected while analysing generated column, which include objects (col)
==
# Generated column with an expression that is too deep.
CREATE TABLE Users (
  id INT64 NOT NULL,
  StrCol STRING(MAX),
  StrExpr STRING(MAX) AS (CONCAT(StrCol, CONCAT(StrCol, CONCAT(StrCol, CONCAT(StrCol, CONCAT(StrCol, CONCAT(StrCol, CONCAT(StrCol, CONCAT(StrCol, CONCAT(StrCol, CONCAT(StrCol, CONCAT(StrCol, CONCAT(StrCol, CONCAT(StrCol, CONCAT(StrCol, CONCAT(StrCol, CONCAT(StrCol, CONCAT(StrCol, CONCAT(StrCol, CONCAT(StrCol, CONCAT(StrCol, "1"))))))))))))))))))))) STORED,
) PRIMARY KEY(id);
--
ERROR: Error parsing the definition of generated column `Users`.`StrExpr`: Expression depth of 21 exceeds the maximum allowed depth of 20.
==
# Generated column with an expression that is too deep.
CREATE TABLE Users (
  id INT64 NOT NULL,
  StrCol STRING(MAX)
) PRIMARY KEY(id);
ALTER TABLE Users ADD COLUMN StrExpr STRING(MAX) AS (CONCAT(StrCol, CONCAT(StrCol, CONCAT(StrCol, CONCAT(StrCol, CONCAT(StrCol, CONCAT(StrCol, CONCAT(StrCol, CONCAT(StrCol, CONCAT(StrCol, CONCAT(StrCol, CONCAT(StrCol, CONCAT(StrCol, CONCAT(StrCol, CONCAT(StrCol, CONCAT(StrCol, CONCAT(StrCol, CONCAT(StrCol, CONCAT(StrCol, CONCAT(StrCol, CONCAT(StrCol, "1"))))))))))))))))))))) STORED;
--
ERROR: Error parsing the definition of generated column `Users`.`StrExpr`: Expression depth of 21 exceeds the maximum allowed depth of 20.
==
# Drop a column which is referenced by a generated column.
CREATE TABLE T (
  id INT64,
  a INT64,
  expr INT64 AS (a) STORED,
) PRIMARY KEY(id);
ALTER TABLE T DROP COLUMN a;
--
ERROR: Cannot drop column `a` from table `T` because it is referenced by generated column `expr`.
==
# Dropping a generated column used by a generated column.
CREATE TABLE T (
  id INT64,
  a INT64,
  expr1 INT64 AS (a) STORED,
  expr2 INT64 AS (expr1) STORED
) PRIMARY KEY (id);
ALTER TABLE T DROP COLUMN expr1;
--
ERROR: Cannot drop column `expr1` from table `T` because it is referenced by generated column `expr2`.
==
# Changing the type of a dependant column.
CREATE TABLE T (
  id INT64,
  a   STRING(MAX),
  b   BYTES(MAX) AS (FROM_HEX(a)) STORED
) PRIMARY KEY(id);
ALTER TABLE T ALTER COLUMN a BYTES(MAX);
--
ERROR: Cannot change the data type of column `a`, which has a dependent stored generated column.
==
# Using non-scalar function in generated column.
CREATE TABLE T (
  expr BOOL AS ((SELECT true) INTERSECT ALL (SELECT true)) STORED,
) PRIMARY KEY();
--
ERROR: Error parsing the definition of generated column `T`.`expr`: Cannot use non-scalar expressions inside stored generated columns.
==
# Subquery
CREATE TABLE TableWithSelect1 (
  val INT64 AS (SELECT 1) STORED,
) PRIMARY KEY();
--
ERROR: Error parsing the definition of generated column `TableWithSelect1`.`val`: Cannot use non-scalar expressions inside stored generated columns.
==
# Nested Subquery
CREATE TABLE TableWithNestedSubquery (
  val ARRAY<INT64> AS (ARRAY_REVERSE(ARRAY(SELECT 1))) STORED,
) PRIMARY KEY();
--
ERROR: Error parsing the definition of generated column `TableWithNestedSubquery`.`val`: Cannot use non-scalar expressions inside stored generated columns.
==
# Non-deterministic function.
CREATE TABLE T (
  id INT64,
  expr TIMESTAMP AS (CURRENT_TIMESTAMP()) STORED,
) PRIMARY KEY(id);
--
ERROR: Error parsing the definition of generated column `T`.`expr`: Expression is non-deterministic due to the use of non-determinstic function `CURRENT_TIMESTAMP`. Expression of stored generated columns must yield the same value for the same dependent column values. Non-deterministic functions inside the expressions are not allowed.
==
# allow_commit_timestamp not allowed on dependencies of generated columns.
CREATE TABLE T(
  id INT64,
  ts TIMESTAMP OPTIONS (allow_commit_timestamp = true),
  expr TIMESTAMP AS (ts) STORED
) PRIMARY KEY(id);
--
ERROR: Cannot use commit timestamp column `ts` as a dependency of a materialized generated column.
==
# Adding stored generated column that uses a commit timestamp column is
# disallowed.
CREATE TABLE T(
  id INT64,
  ts TIMESTAMP OPTIONS (allow_commit_timestamp = true)
) PRIMARY KEY(id);
ALTER TABLE T ADD COLUMN expr TIMESTAMP AS (ts) STORED;
--
ERROR: Cannot use commit timestamp column `ts` as a dependency of a materialized generated column.
==
# Altering a column that is used by a stored generated column to be commit
# timestamp is disallowed.
CREATE TABLE T(
  id INT64,
  ts TIMESTAMP,
  expr TIMESTAMP AS (ts) STORED
) PRIMARY KEY(id);
ALTER TABLE T ALTER COLUMN ts SET OPTIONS (allow_commit_timestamp = true);
--
ERROR: Cannot use commit timestamp column `ts` as a dependency of a materialized generated column.
==
# Using PENDING_COMMIT_TIMESTAMP() in generated column at CREATE TABLE.
CREATE TABLE T (
  id INT64,
  expr TIMESTAMP AS (PENDING_COMMIT_TIMESTAMP()) STORED,
) PRIMARY KEY(id);
--
ERROR: Error parsing the definition of generated column `T`.`expr`: The PENDING_COMMIT_TIMESTAMP() function may only be used as a value for INSERT or UPDATE of an appropriately typed column. It cannot be used in SELECT, or as the input to any other scalar expression.
