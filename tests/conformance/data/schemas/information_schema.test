@Dialect=GOOGLE_STANDARD_SQL
ALTER DATABASE db SET OPTIONS (default_sequence_kind = 'bit_reversed_positive');
CREATE TABLE base (
  key1 INT64,
  key2 STRING(256),
  bool_value BOOL,
  int_value INT64 NOT NULL,
  float_value FLOAT32,
  double_value FLOAT64,
  str_value STRING(MAX),
  byte_value BYTES(256),
  timestamp_value TIMESTAMP options (allow_commit_timestamp = true),
  date_value DATE,
  bool_array ARRAY<BOOL> NOT NULL,
  int_array ARRAY<INT64>,
  float_array ARRAY<FLOAT32>,
  double_array ARRAY<FLOAT64>,
  str_array ARRAY<STRING(256)>,
  byte_array ARRAY<BYTES(MAX)>,
  timestamp_array ARRAY<TIMESTAMP>,
  date_array ARRAY<DATE>,
  gen_value INT64 AS (key1 + 1) STORED,
  gen_function_value INT64 AS (LENGTH(key2)),
  default_col_value INT64 DEFAULT (100),
  default_timestamp_col_value TIMESTAMP DEFAULT (CURRENT_TIMESTAMP()),
  identity_no_params_col INT64 GENERATED BY DEFAULT AS IDENTITY,
  identity_col INT64 GENERATED BY DEFAULT AS IDENTITY (BIT_REVERSED_POSITIVE START COUNTER WITH 1111 SKIP RANGE 2222, 3333),
  CONSTRAINT check_constraint_name CHECK(int_value > 0),
  CHECK(int_value > 0),
) PRIMARY KEY (key1, key2 DESC);
CREATE TABLE cascade_child (
  key1 INT64,
  key2 STRING(256),
  child_key BOOL,
  value1 STRING(MAX) NOT NULL,
  value2 BOOL,
  created_at TIMESTAMP,
) PRIMARY KEY (key1, key2 DESC, child_key ASC),
  INTERLEAVE IN PARENT base ON DELETE CASCADE;
CREATE TABLE no_action_child (
  key1 INT64,
  key2 STRING(256),
  child_key BOOL,
  value  STRING(MAX)
) PRIMARY KEY (key1, key2 DESC, child_key ASC),
  INTERLEAVE IN PARENT base ON DELETE NO ACTION;
CREATE UNIQUE NULL_FILTERED INDEX cascade_child_by_value
  ON cascade_child(key1, key2 DESC, value2 ASC)
  STORING(value1), INTERLEAVE IN base;
CREATE INDEX no_action_child_by_value ON no_action_child(value ASC);
ALTER TABLE base ADD CONSTRAINT fk_base_cascade_child
  FOREIGN KEY(bool_value, key2)
  REFERENCES cascade_child(child_key, value1);
CREATE TABLE row_deletion_policy (
  key INT64,
  created_at TIMESTAMP,
) PRIMARY KEY (key), ROW DELETION POLICY (OLDER_THAN(created_at, INTERVAL 7 DAY));
CREATE VIEW base_view SQL SECURITY INVOKER AS SELECT base.key1 FROM base;
CREATE CHANGE STREAM test_stream FOR base(bool_value,int_value),no_action_child OPTIONS ( retention_period = '36h' );
CREATE CHANGE STREAM test_stream2 FOR base,no_action_child(),cascade_child(value1,value2,created_at) OPTIONS ( retention_period = '2d' , value_capture_type = 'OLD_AND_NEW_VALUES' );
CREATE CHANGE STREAM test_stream3 FOR ALL;
CREATE CHANGE STREAM test_stream4;
CREATE SCHEMA named_schema;
CREATE TABLE named_schema.ns_table_1 (
  key1 INT64,
  key2 STRING(256),
  bool_value BOOL,
) PRIMARY KEY (key1);
CREATE TABLE named_schema.ns_table_2 (
  key1 INT64,
  key2 INT64
) PRIMARY KEY (key1);
ALTER TABLE named_schema.ns_table_2 ADD CONSTRAINT fk_ns_table_2 FOREIGN KEY (key1) REFERENCES named_schema.ns_table_1(key1);
CREATE UNIQUE INDEX named_schema.ns_index ON named_schema.ns_table_1 (key1 ASC);
CREATE VIEW named_schema.ns_view SQL SECURITY INVOKER AS SELECT t.key1 FROM named_schema.ns_table_1 as t;
CREATE SEQUENCE test_sequence OPTIONS (sequence_kind = 'bit_reversed_positive', start_with_counter = 1234);
CREATE MODEL test_model1
INPUT( feature INT64 )
OUTPUT( label STRING(MAX) )
REMOTE OPTIONS (
  endpoint = '//aiplatform.googleapis.com/projects/tp/locations/tl/endpoints/schemaless'
);
CREATE MODEL test_model2
INPUT (
  feature INT64,
  optional_feature BOOL OPTIONS (required = false),
)
OUTPUT(
  label STRING(MAX) OPTIONS (required = false),
)
REMOTE OPTIONS (
  endpoints = ['//aiplatform.googleapis.com/projects/tp/locations/tl/endpoints/schemaless'],
  default_batch_size = 1
);

===
@Dialect=POSTGRESQL
ALTER DATABASE db SET spanner.default_sequence_kind = 'bit_reversed_positive';
CREATE TABLE base (
  key1 bigint,
  key2 varchar(256),
  bool_value bool,
  int_value bigint NOT NULL,
  float_value float4,
  double_value float8,
  str_value varchar,
  byte_value bytea,
  timestamp_value spanner.commit_timestamp,
  date_value date,
  bool_array bool[] NOT NULL,
  int_array bigint[],
  float_array float4[],
  double_array float8[],
  str_array varchar(256)[],
  byte_array bytea[],
  timestamp_array timestamptz[],
  date_array date[],
  gen_value bigint GENERATED ALWAYS AS (key1 + 1) STORED,
  gen_function_value bigint GENERATED ALWAYS AS (LENGTH(key2)) VIRTUAL,
  default_col_value bigint DEFAULT (100),
  default_timestamp_col_value timestamptz DEFAULT CURRENT_TIMESTAMP,
  identity_no_params_col bigint GENERATED BY DEFAULT AS IDENTITY,
  identity_col bigint GENERATED BY DEFAULT AS IDENTITY (BIT_REVERSED_POSITIVE START COUNTER WITH 1111 SKIP RANGE 2222 3333),
  CONSTRAINT check_constraint_name CHECK(int_value > 0),
  CHECK(int_value > 0),
  -- PostgreSQL doesn't support creating an index backed by a primary key in
  -- descending order so this primary key is different to the GSQL version
  -- above.
  PRIMARY KEY (key1, key2)
);
CREATE TABLE cascade_child (
  key1 bigint,
  key2 varchar(256),
  child_key bool,
  value1 varchar(256) NOT NULL,
  value2 bool,
  created_at timestamptz,
  -- PostgreSQL doesn't support creating an index backed by a primary key
  -- that specifies an order so this primary key is different to the GSQL
  -- version above.
  PRIMARY KEY (key1, key2, child_key)
) INTERLEAVE IN PARENT base ON DELETE CASCADE;
CREATE TABLE no_action_child (
  key1 bigint,
  key2 varchar(256),
  child_key bool,
  value varchar,
  -- PostgreSQL doesn't support creating an index backed by a primary key
  -- that specifies an order so this primary key is different to the GSQL
  -- version above.
  PRIMARY KEY (key1, key2, child_key)
) INTERLEAVE IN PARENT base ON DELETE NO ACTION;
CREATE UNIQUE INDEX cascade_child_by_value
  -- Note that key2 can't have a DESC order because we can't define the
  -- ordering of the primary key in PG as stated above.
  ON cascade_child(key1, key2, value2 ASC)
  INCLUDE(value1)
  INTERLEAVE IN base
  WHERE key1 IS NOT NULL
  AND key2 IS NOT NULL
  AND value2 IS NOT NULL;
CREATE INDEX no_action_child_by_value ON no_action_child(value ASC);
ALTER TABLE base ADD CONSTRAINT fk_base_cascade_child
  FOREIGN KEY(bool_value, key2)
  REFERENCES cascade_child(child_key, value1);
CREATE TABLE row_deletion_policy (
  key bigint,
  created_at timestamptz,
  PRIMARY KEY (key)
) TTL INTERVAL '7 days' on created_at;
CREATE VIEW base_view SQL SECURITY INVOKER AS SELECT base.key1 FROM base;
CREATE CHANGE STREAM test_stream FOR base(bool_value,int_value),no_action_child WITH ( retention_period = '36h' );
CREATE CHANGE STREAM test_stream2 FOR base,no_action_child(),cascade_child(value1,value2,created_at) WITH ( retention_period = '2d' , value_capture_type = 'OLD_AND_NEW_VALUES' );
CREATE CHANGE STREAM test_stream3 FOR ALL;
CREATE CHANGE STREAM test_stream4;
CREATE SCHEMA named_schema;
CREATE TABLE named_schema.ns_table_1 (
  key1 bigint,
  key2 varchar(256),
  bool_value bool,
  PRIMARY KEY (key1)
);
CREATE TABLE named_schema.ns_table_2 (
  key1 bigint,
  key2 bigint,
  PRIMARY KEY (key1)
);
ALTER TABLE named_schema.ns_table_2 ADD CONSTRAINT fk_ns_table_2 FOREIGN KEY (key1) REFERENCES named_schema.ns_table_1(key1);
CREATE UNIQUE INDEX ns_index ON named_schema.ns_table_1 (key1 ASC);
CREATE VIEW named_schema.ns_view SQL SECURITY INVOKER AS SELECT t.key1 FROM named_schema.ns_table_1 as t;
CREATE SEQUENCE test_sequence BIT_REVERSED_POSITIVE START COUNTER WITH 1234;

